{"version":3,"sources":["webcomponents-hi-index.js","bower_components/shadycss/src/css-parse.js","bower_components/shadycss/src/style-settings.js","bower_components/shadycss/src/style-util.js","bower_components/shadycss/src/style-properties.js","bower_components/shadycss/src/custom-style-element.js","bower_components/html-imports/src/html-imports.js","bower_components/shadycss/src/style-transformer.js","bower_components/shadycss/src/template-map.js","bower_components/shadycss/src/style-info.js","bower_components/shadycss/src/style-placeholder.js","bower_components/shadycss/src/apply-shim.js","bower_components/shadycss/src/document-watcher.js","bower_components/shadycss/src/ShadyCSS.js","bower_components/shadycss/src/style-cache.js","src/post-polyfill.js","src/unresolved.js"],"names":["parse","text","clean","parseCss","lex","cssText","replace","RX","comments","port","root","start","end","length","n","i","l","OPEN_BRACE","rules","p","previous","parent","push","CLOSE_BRACE","node","t","substring","parsedCssText","trim","ss","_expandUnicodeEscapes","multipleSpaces","lastIndexOf","s","parsedSelector","selector","atRule","indexOf","type","types","MEDIA_RULE","match","keyframesRule","KEYFRAMES_RULE","keyframesName","split","pop","VAR_START","MIXIN_RULE","STYLE_RULE","r$","r","code","arguments","repeat","stringify","preserveProperties","_hasMixinRules","removeCustomProps","removeCustomPropAssignment","removeCustomPropApply","customProp","mixinProp","mixinApply","varApply","parseSettings","settings","nativeCssVariables","shimcssproperties","nativeShadow","shimshadow","toCssText","callback","forEachRule","rulesForStyle","style","__cssRules","textContent","isKeyframesSelector","rule","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","matchMedia","rx","MEDIA_MATCH","window","matches","applyCss","moniker","target","contextNode","createScopeStyle","applyStyle","document","head","after","nextSibling","firstChild","lastHeadApplyNode","insertBefore","createElement","setAttribute","applyStylePlaceHolder","placeHolder","createComment","scope","findMatchingParen","level","processVariableAndFallback","str","inner","prefix","suffix","comma","value","fallback","setElementClassRaw","element","ShadyDOM","nativeMethods","call","addToBitMask","bits","o","parseInt","enqueueDocumentValidation","enqueued","HTMLImports","whenReady","validateDocument","readyState","addEventListener","requestAnimationFrame","ShadyCSS","_elementsHaveApplied","updateStyles","isImportLink","nodeType","Node","ELEMENT_NODE","MATCHES","IMPORT_SELECTOR","whenElementLoaded","Promise","resolve","isElementLoaded","isIE","localName","then","el","src","whenDocumentReady","whenImportsReady","stateChanged","removeEventListener","imports","querySelectorAll","rootImportsSelector","promises","imp","all","importForElement","parentNode","host","useNative","currentScript","Object","defineProperty","get","scripts","configurable","ABS_URL_TEST","CSS_URL_REGEXP","CSS_IMPORT_REGEXP","STYLESHEET_REGEXP","Path","fixUrls","base","href","replaceAttrUrl","getAttribute","resolveUrlsInStyle","fixUrlAttributes","attrs","a","at","attributes","v","search","resolveUrlsInCssText","fixUrlsInTemplates","t$","fixUrlsInTemplate","template","content","n$","linkUrl","replaceUrls","regexp","m","pre","url","post","urlPath","_resolveUrl","test","__workingURL","u","URL","pathname","e","doc","__tempDoc","implementation","createHTMLDocument","__base","appendChild","__anchor","Xhr","async","load","request","XMLHttpRequest","open","redirectedUrl","locationHeader","getResponseHeader","substr","location","origin","console","error","message","isOk","status","resource","response","responseText","send","Loader","constructor","onLoad","onComplete","cache","onload","oncomplete","inflight","pending","addNodes","nodes","count","require","checkDone","addNode","elt","dedupe","fetch","tail","receive","pieces","header","body","atob","decodeURIComponent","err","$p","navigator","userAgent","importDisableType","disabledLinkSelector","importsSelector","importDependencyAttr","pendingScriptsSelector","pendingStylesSelector","Element","prototype","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","dispatchEvent","CustomEvent","cancelable","bubbles","detail","onLoadingDone","event","elem","documents","MutationObserver","_onMutation","bind","observe","childList","_loader","_onLoaded","_onLoadedAll","_loadSubtree","_makeDocument","createDocumentFragment","p1","p2","innerHTML","firstElementChild","baseEl","querySelector","removeChild","s$","_flatten","_waitForStyles","_runScripts","_fireEvents","import","DOCUMENT_FRAGMENT_NODE","_observe","promise","clone","removeAttribute","j","ll","name","replaceChild","needsMove","rootImport","next","placeholder","eventType","subtree","mutations","addedNodes","inUse","CSS","supports","WebComponents","flags","VAR_ASSIGN","MIXIN_MATCH","VAR_CONSUMED","ANIMATION_MATCH","IS_VAR","BRACKETED","HOST_PREFIX","HOST_SUFFIX","SCOPE_NAME","StyleTransformer","dom","shouldRemoveScope","__styleScoped","_transformDom","c$","_content","childNodes","children","classList","remove","add","c","newValue","StyleUtil.setElementClassRaw","elementStyles","styleRules","cssBuildType","__cssBuild","StyleUtil.toCssText","css","is","extends","ext","hostScope","_calcHostScope","_calcElementScope","self","isScoped","_transformRule","_transformComplexSelector","transformer","transformedSelector","_transformRuleCss","p$","COMPLEX_SELECTOR_SEP","StyleUtil.isKeyframesSelector","join","stop","NTH","SLOTTED_START","HOST","SIMPLE_SELECTOR_SEP","info","_transformCompoundSelector","combinator","slottedIndex","SLOTTED","_transformHostSelector","_transformSimpleSelector","slotted","SLOTTED_PAREN","paren","DIR_PAREN","before","dir","PSEUDO_PREFIX","HOST_PAREN","SIMPLE_SELECTOR_PREFIX","typeSelector","documentRule","normalizeRootSelector","_transformDocumentSelector","SCOPE_DOC_SELECTOR","StyleTransformer$1","templateMap","StyleInfo","__styleInfo","set","styleInfo","invalidate","elementName","_applyShimInvalid","startValidating","_validating","ast","ownStylePropertyNames","typeExtension","cssBuild","overrideStyleProperties","styleProperties","scopeSelector","customStyle","IS_IE","XSCOPE_NAME","StyleProperties","decorateStyles","props","keyframes","ruleIndex","StyleUtil.forEachRule","decorateRule","index","collectPropertiesInCssText","propertyInfo","_keyframes","names","properties","hasProperties","collectProperties","collectCssText","StyleUtil.rx","any","exec","assign","collectConsumingCssText","reify","getOwnPropertyNames","valueForProperty","property","valueForProperties","StyleUtil.processVariableAndFallback","propertyValue","parts","lastIndex","colon","pp","slice","applyProperties","output","applyKeyframeTransforms","keyframeTransforms","input","hasAnimations","transform","keyframeNamesToTransform","keyframe","propertyDataFromStyles","selectorToMatch","key","whenHostOrRootRule","isRoot","isHost","hostAndRootPropertiesForScope","hostProps","rootProps","_element","transformStyles","hostSelector","rxHostSelector","hostRx","RegExp","_elementKeyframeTransforms","_scopeSelector","keyframesRules","_scopeKeyframes","_keyframesRuleTransformer","keyframesNameRx","transformedKeyframesName","scopeId","applyElementScopeSelector","old","applyElementStyle","_useCount","StyleUtil.applyCss","shadowRoot","StyleUtil.applyStyle","applyCustomStyle","StyleUtil.rulesForStyle","StyleProperties$1","placeholderMap","ce","customElements","origDefine","define","clazz","options","APPLY_NAME_CLEAN","INITIAL_INHERIT","MIXIN_VAR_SEP","MixinMap","_map","dependants","ApplyShim","_currentTemplate","_measureElement","_separator","_boundProduceCssProperties","matchText","propertyName","valueProperty","valueMixin","_produceCssProperties","detectMixin","has","transformStyle","transformRules","transformRule","transformCssText","_consumeCssProperties","_getInitialValueForProperty","getComputedStyle","getPropertyValue","mixinName","idx","applyPos","afterApplyPos","textBeforeApply","textAfterApply","defaults","_cssTextToMap","replacement","_atApplyToCssProperties","fallbacks","vars","mixinEntry","f","_replaceInitialOrInherit","out","sp","_invalidateMixinEntry","mixinAsProperties","mixinValues","combinedProps","oldProps","create","needToInvalidate","applyShim","flush","elementNeedsScoping","contains","SVGElement","hasAttribute","handler","mxns","mxn","x","documentElement","getRootNode","removedNodes","classes","Array","from","classIdx","observer","nativeCustomElements","delayedStart","listener","takeRecords","styleCache","typeMax","_validate","cacheEntry","ownPropertyNames","pn","store","tagname","styleElement","list","shift","entry","_scopeCounter","_documentOwner","_documentOwnerStyleInfo","nativeCss","nativeCssApply","watcherFlush","_generateScopeSelector","id","getStyleAst","styleAstToString","_gatherStyles","styles","_getCssBuild","prepareTemplate","_prepared","hasMixins","_styleAst","_generateStaticStyle","_style","_ownPropertyNames","shadowroot","_prepareHost","_cssBuild","overrideProps","hasApplied","_isRootOwner","CustomStyle","CS","_documentDirty","findStyles","_revalidateApplyShim","_updateProperties","applyStyles","_updateNativeProperties","_applyStyleProperties","_applyToDescendants","_styleOwnerForNode","cachedScopeSelector","cachedStyle","oldScopeSelector","owner","ownerStyleInfo","ownerProperties","hostAndRootProps","propertyData","propertiesMatchingHost","_mixinOverrideStyles","overrides","removeProperty","setProperty","_transformCustomStyleForDocument","_applyCustomStyleToDocument","getComputedStyleValue","setElementClass","classString","scopeName","classAttr","k$","_styleInfoForNode","customStyles","hookFn","HTMLElement","_customStyles","processHook","fn","__appliedElement","attr"],"mappings":"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","file":"webcomponents-hi.js","sourcesContent":["(function () {\n'use strict';\n\n/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n(function(scope) {\n\n  /********************* base setup *********************/\n  const IMPORT_SELECTOR = 'link[rel=import]';\n  const useNative = Boolean('import' in document.createElement('link'));\n\n  // Polyfill `currentScript` for browsers without it.\n  let currentScript = null;\n  if ('currentScript' in document === false) {\n    Object.defineProperty(document, 'currentScript', {\n      get: function() {\n        return currentScript ||\n          // NOTE: only works when called in synchronously executing code.\n          // readyState should check if `loading` but IE10 is\n          // interactive when scripts run so we cheat. This is not needed by\n          // html-imports polyfill but helps generally polyfill `currentScript`.\n          (document.readyState !== 'complete' ?\n            document.scripts[document.scripts.length - 1] : null);\n      },\n      configurable: true\n    });\n  }\n\n  /********************* path fixup *********************/\n  const ABS_URL_TEST = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n  const CSS_URL_REGEXP = /(url\\()([^)]*)(\\))/g;\n  const CSS_IMPORT_REGEXP = /(@import[\\s]+(?!url\\())([^;]*)(;)/g;\n  const STYLESHEET_REGEXP = /(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g;\n\n\n  // path fixup: style elements in imports must be made relative to the main\n  // document. We fixup url's in url() and @import.\n  const Path = {\n\n    fixUrls: function(element, base) {\n      if (element.href) {\n        element.setAttribute('href',\n          Path.replaceAttrUrl(element.getAttribute('href'), base));\n      }\n      if (element.src) {\n        element.setAttribute('src',\n          Path.replaceAttrUrl(element.getAttribute('src'), base));\n      }\n      if (element.localName === 'style') {\n        Path.resolveUrlsInStyle(element, base);\n      } else if (element.localName === 'script' && element.textContent) {\n        element.textContent += `\\n//# sourceURL=${base}`;\n      }\n    },\n\n    fixUrlAttributes: function(element, base) {\n      const attrs = ['action', 'src', 'href', 'url', 'style'];\n      for (let i = 0, a; i < attrs.length && (a = attrs[i]); i++) {\n        const at = element.attributes[a];\n        const v = at && at.value;\n        if (v && (v.search(/({{|\\[\\[)/) < 0)) {\n          at.value = (a === 'style') ?\n            Path.resolveUrlsInCssText(v, base) :\n            Path.replaceAttrUrl(v, base);\n        }\n      }\n    },\n\n    fixUrlsInTemplates: function(element, base) {\n      const t$ = element.querySelectorAll('template');\n      for (let i = 0; i < t$.length; i++) {\n        Path.fixUrlsInTemplate(t$[i], base);\n      }\n    },\n\n    fixUrlsInTemplate: function(template, base) {\n      const content = template.content;\n      if (!content) { // Template not supported.\n        return;\n      }\n      const n$ = content.querySelectorAll(\n        'style, form[action], [src], [href], [url], [style]');\n      for (let i = 0; i < n$.length; i++) {\n        const n = n$[i];\n        if (n.localName == 'style') {\n          Path.resolveUrlsInStyle(n, base);\n        } else {\n          Path.fixUrlAttributes(n, base);\n        }\n      }\n      Path.fixUrlsInTemplates(content, base);\n    },\n\n    resolveUrlsInStyle: function(style, linkUrl) {\n      style.textContent = Path.resolveUrlsInCssText(style.textContent, linkUrl);\n    },\n\n    resolveUrlsInCssText: function(cssText, linkUrl) {\n      let r = Path.replaceUrls(cssText, linkUrl, CSS_URL_REGEXP);\n      r = Path.replaceUrls(r, linkUrl, CSS_IMPORT_REGEXP);\n      return r;\n    },\n\n    replaceUrls: function(text, linkUrl, regexp) {\n      return text.replace(regexp, function(m, pre, url, post) {\n        let urlPath = url.replace(/[\"']/g, '');\n        if (linkUrl) {\n          urlPath = Path._resolveUrl(urlPath, linkUrl);\n        }\n        return pre + '\\'' + urlPath + '\\'' + post;\n      });\n    },\n\n    replaceAttrUrl: function(text, linkUrl) {\n      if (text && ABS_URL_TEST.test(text)) {\n        return text;\n      } else {\n        return Path._resolveUrl(text, linkUrl);\n      }\n    },\n\n    _resolveUrl: function(url, base) {\n      // Lazy feature detection.\n      if (Path.__workingURL === undefined) {\n        Path.__workingURL = false;\n        try {\n          const u = new URL('b', 'http://a');\n          u.pathname = 'c%20d';\n          Path.__workingURL = (u.href === 'http://a/c%20d');\n        } catch (e) {}\n      }\n\n      if (Path.__workingURL) {\n        return (new URL(url, base)).href;\n      }\n\n      // Fallback to creating an anchor into a disconnected document.\n      let doc = Path.__tempDoc;\n      if (!doc) {\n        doc = document.implementation.createHTMLDocument('temp');\n        Path.__tempDoc = doc;\n        doc.__base = doc.createElement('base');\n        doc.head.appendChild(doc.__base);\n        doc.__anchor = doc.createElement('a');\n      }\n      doc.__base.href = base;\n      doc.__anchor.href = url;\n      return doc.__anchor.href || url;\n    }\n  };\n\n  /********************* Xhr processor *********************/\n  const Xhr = {\n\n    async: true,\n\n    /**\n     * @param {!string} url\n     * @param {!function(boolean, ?, string=)} callback\n     * @return {XMLHttpRequest}\n     */\n    load: function(url, callback) {\n      const request = new XMLHttpRequest();\n      request.open('GET', url, Xhr.async);\n      request.addEventListener('readystatechange', (e) => {\n        if (request.readyState === 4) {\n          // Servers redirecting an import can add a Location header to help us\n          // polyfill correctly.\n          let redirectedUrl = undefined;\n          try {\n            const locationHeader = request.getResponseHeader('Location');\n            if (locationHeader) {\n              // Relative or full path.\n              redirectedUrl = (locationHeader.substr(0, 1) === '/') ?\n                location.origin + locationHeader : locationHeader;\n            }\n          } catch (e) {\n            console.error(e.message);\n          }\n          const isOk = ((request.status >= 200 && request.status < 300) ||\n            request.status === 304 || request.status === 0);\n          const resource = (request.response || request.responseText);\n          callback(!isOk, resource, redirectedUrl);\n        }\n      });\n      request.send();\n      return request;\n    }\n  };\n\n  /********************* loader *********************/\n  // This loader supports a dynamic list of urls\n  // and an oncomplete callback that is called when the loader is done.\n  class Loader {\n    constructor(onLoad, onComplete) {\n      this.cache = {};\n      this.onload = onLoad;\n      this.oncomplete = onComplete;\n      this.inflight = 0;\n      this.pending = {};\n    }\n\n    /**\n     * @param {!NodeList<!Element>} nodes\n     */\n    addNodes(nodes) {\n      const count = nodes.length;\n      if (!count) {\n        return;\n      }\n      this.inflight += count;\n      for (let i = 0; i < count; i++) {\n        this.require(nodes[i]);\n      }\n      this.checkDone();\n    }\n\n    /**\n     * @param {!Element} node\n     */\n    addNode(node) {\n      // number of transactions to complete\n      this.inflight++;\n      // commence transactions\n      this.require(node);\n      // anything to do?\n      this.checkDone();\n    }\n\n    /**\n     * @param {!Element} elt\n     */\n    require(elt) {\n      const url = elt.href || elt.src;\n      // deduplication\n      if (!this.dedupe(url, elt)) {\n        // fetch this resource\n        this.fetch(url, elt);\n      }\n    }\n\n    /**\n     * @param {string} url\n     * @param {!Element} elt\n     * @return {boolean}\n     */\n    dedupe(url, elt) {\n      if (this.pending[url]) {\n        // add to list of nodes waiting for inUrl\n        this.pending[url].push(elt);\n        // don't need fetch\n        return true;\n      }\n      let resource;\n      if (this.cache[url]) {\n        this.onload(url, elt, this.cache[url]);\n        // finished this transaction\n        this.tail();\n        // don't need fetch\n        return true;\n      }\n      // first node waiting for inUrl\n      this.pending[url] = [elt];\n      // need fetch (not a dupe)\n      return false;\n    }\n\n    /**\n     * @param {string} url\n     * @param {!Element} elt\n     */\n    fetch(url, elt) {\n      if (!url) {\n        this.receive(url, elt, true, 'error: href must be specified');\n      } else if (url.match(/^data:/)) {\n        // Handle Data URI Scheme\n        const pieces = url.split(',');\n        const header = pieces[0];\n        let body = pieces[1];\n        if (header.indexOf(';base64') > -1) {\n          body = atob(body);\n        } else {\n          body = decodeURIComponent(body);\n        }\n        this.receive(url, elt, false, body);\n      } else {\n        Xhr.load(url, (error, resource, redirectedUrl) =>\n          this.receive(url, elt, error, resource, redirectedUrl));\n      }\n    }\n\n    /**\n     * @param {!string} url\n     * @param {!Element} elt\n     * @param {boolean} err\n     * @param {string=} resource\n     * @param {string=} redirectedUrl\n     */\n    receive(url, elt, err, resource, redirectedUrl) {\n      this.cache[url] = resource;\n      const $p = this.pending[url];\n      for (let i = 0, l = $p.length, p;\n        (i < l) && (p = $p[i]); i++) {\n        // If url was redirected, use the redirected location so paths are\n        // calculated relative to that.\n        this.onload(url, p, resource, err, redirectedUrl);\n        this.tail();\n      }\n      this.pending[url] = null;\n    }\n\n    tail() {\n      --this.inflight;\n      this.checkDone();\n    }\n\n    checkDone() {\n      if (!this.inflight) {\n        this.oncomplete();\n      }\n    }\n  }\n\n  /********************* importer *********************/\n\n  const isIE = /Trident/.test(navigator.userAgent) ||\n    /Edge\\/\\d./i.test(navigator.userAgent);\n\n  // Used to disable loading of resources.\n  const importDisableType = 'import-disable';\n\n  const disabledLinkSelector = `link[rel=stylesheet][href][type=${importDisableType}]`;\n\n  const importsSelector = `\n    ${IMPORT_SELECTOR},\n    ${disabledLinkSelector},\n    style:not([type]),\n    link[rel=stylesheet][href]:not([type]),\n    script:not([type]),\n    script[type=\"application/javascript\"],\n    script[type=\"text/javascript\"]`;\n\n  const importDependencyAttr = 'import-dependency';\n\n  const rootImportsSelector = `${IMPORT_SELECTOR}:not(${importDependencyAttr})`;\n\n  const pendingScriptsSelector = `script[${importDependencyAttr}]`;\n\n  const pendingStylesSelector = `style[${importDependencyAttr}],\n    link[rel=stylesheet][${importDependencyAttr}]`;\n\n  /**\n   * @type {Function}\n   */\n  const MATCHES = Element.prototype.matches ||\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\n  /**\n   * Importer will:\n   * - load any linked import documents (with deduping)\n   * - whenever an import is loaded, prompt the parser to try to parse\n   * - observe imported documents for new elements (these are handled via the\n   *   dynamic importer)\n   */\n  class Importer {\n    constructor() {\n      this.documents = {};\n      // Observe only document head\n      new MutationObserver(this._onMutation.bind(this)).observe(document.head, {\n        childList: true\n      });\n      this._loader = new Loader(\n        this._onLoaded.bind(this), this._onLoadedAll.bind(this)\n      );\n      whenDocumentReady(() => this._loadSubtree(document));\n    }\n\n    /**\n     * @param {!(HTMLDocument|DocumentFragment)} doc\n     */\n    _loadSubtree(doc) {\n      const nodes = doc.querySelectorAll(IMPORT_SELECTOR);\n      this._loader.addNodes(nodes);\n    }\n\n    _onLoaded(url, elt, resource, err, redirectedUrl) {\n      // We've already seen a document at this url, return.\n      if (this.documents[url] !== undefined) {\n        return;\n      }\n      if (err) {\n        this.documents[url] = null;\n      } else {\n        // Generate a document from data.\n        const doc = this._makeDocument(resource, redirectedUrl || url);\n        this.documents[url] = doc;\n        this._loadSubtree(doc);\n      }\n    }\n\n    /**\n     * Creates a new document containing resource and normalizes urls accordingly.\n     * @param {string=} resource\n     * @param {string=} url\n     * @return {!DocumentFragment}\n     */\n    _makeDocument(resource, url) {\n      if (!resource) {\n        return document.createDocumentFragment();\n      }\n\n      if (isIE) {\n        // <link rel=stylesheet> should be appended to <head>. Not doing so\n        // in IE/Edge breaks the cascading order. We disable the loading by\n        // setting the type before setting innerHTML to avoid loading\n        // resources twice.\n        resource = resource.replace(STYLESHEET_REGEXP, (match, p1, p2) => {\n          if (match.indexOf('type=') === -1) {\n            return `${p1} type=${importDisableType} ${p2}`;\n          }\n          return match;\n        });\n      }\n\n      let content;\n      const template = /** @type {!HTMLTemplateElement} */\n        (document.createElement('template'));\n      template.innerHTML = resource;\n      if (template.content) {\n        // This creates issues in Safari10 when used with shadydom (see #12).\n        content = template.content;\n      } else {\n        // <template> not supported, create fragment and move children into it.\n        content = document.createDocumentFragment();\n        while (template.firstElementChild) {\n          content.appendChild(template.firstElementChild);\n        }\n      }\n\n      // Support <base> in imported docs. Resolve url and remove it from the parent.\n      const baseEl = content.querySelector('base');\n      if (baseEl) {\n        url = Path.replaceAttrUrl(baseEl.getAttribute('href'), url);\n        baseEl.parentNode.removeChild(baseEl);\n      }\n\n      // This is specific to users of <dom-module> (Polymer).\n      // TODO(valdrin) remove this when Polymer uses importForElement.\n      const s$ = content.querySelectorAll('dom-module');\n      for (let i = 0, s; i < s$.length && (s = s$[i]); i++) {\n        s.setAttribute('assetpath',\n          Path.replaceAttrUrl(s.getAttribute('assetpath') || '', url));\n      }\n\n      const n$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)>} */\n        (content.querySelectorAll(importsSelector));\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\n        // Listen for load/error events, then fix urls.\n        whenElementLoaded(n);\n        Path.fixUrls(n, url);\n        // Mark for easier selectors.\n        n.setAttribute(importDependencyAttr, '');\n      }\n      Path.fixUrlsInTemplates(content, url);\n      return content;\n    }\n\n    _onLoadedAll() {\n      this._flatten(document);\n      // We wait for styles to load, and at the same time we execute the scripts,\n      // then fire the load/error events for imports to have faster whenReady\n      // callback execution.\n      // NOTE: This is different for native behavior where scripts would be\n      // executed after the styles before them are loaded.\n      // To achieve that, we could select pending styles and scripts in the\n      // document and execute them sequentially in their dom order.\n      Promise.all([this._waitForStyles(), this._runScripts()])\n        .then(() => this._fireEvents());\n    }\n\n    /**\n     * @param {!HTMLDocument} doc\n     */\n    _flatten(doc) {\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\n        (doc.querySelectorAll(IMPORT_SELECTOR));\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\n        let imp = this.documents[n.href];\n        n.import = /** @type {!Document} */ (imp);\n        if (imp && imp.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          this.documents[n.href] = n;\n          // Suppress Closure warning about incompatible subtype assignment.\n          /** @type {!HTMLElement} */\n          (n).import = n;\n          this._flatten(imp);\n          n.appendChild(imp);\n          // If in the main document, observe for any imports added later.\n          if (doc === document) {\n            this._observe(n);\n          }\n        }\n      }\n    }\n\n    /**\n     * Replaces all the imported scripts with a clone in order to execute them.\n     * Updates the `currentScript`.\n     * @return {Promise} Resolved when scripts are loaded.\n     */\n    _runScripts() {\n      const s$ = document.querySelectorAll(pendingScriptsSelector);\n      let promise = Promise.resolve();\n      for (let i = 0, l = s$.length, s; i < l && (s = s$[i]); i++) {\n        promise = promise.then(() => {\n          // The pending scripts have been generated through innerHTML and\n          // browsers won't execute them for security reasons. We cannot use\n          // s.cloneNode(true) either, the only way to run the script is manually\n          // creating a new element and copying its attributes/textContent.\n          const clone = /** @type {!HTMLScriptElement} */\n            (document.createElement('script'));\n          // Remove import-dependency attribute to avoid double cloning.\n          s.removeAttribute(importDependencyAttr);\n          // Copy attributes and textContent.\n          for (let j = 0, ll = s.attributes.length; j < ll; j++) {\n            clone.setAttribute(s.attributes[j].name, s.attributes[j].value);\n          }\n          clone.textContent = s.textContent;\n\n          // Update currentScript and replace original with clone script.\n          currentScript = clone;\n          s.parentNode.replaceChild(clone, s);\n          // Wait for load/error events; after is loaded, reset currentScript.\n          return whenElementLoaded(clone).then(() => currentScript = null);\n        });\n      }\n      return promise;\n    }\n\n    /**\n     * Waits for all the imported stylesheets/styles to be loaded.\n     * @return {Promise}\n     */\n    _waitForStyles() {\n      // <link rel=stylesheet> should be appended to <head>. Not doing so\n      // in IE/Edge breaks the cascading order\n      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10472273/\n      // If there is one <link rel=stylesheet> imported, we must move all imported\n      // links and styles to <head>.\n      const needsMove = !!document.querySelector(disabledLinkSelector);\n      const s$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLStyleElement)>} */\n        (document.querySelectorAll(pendingStylesSelector));\n      const promises = [];\n      for (let i = 0, l = s$.length, s; i < l && (s = s$[i]); i++) {\n        // Listen for load/error events, remove selector once is done loading.\n        promises.push(whenElementLoaded(s)\n          .then(() => s.removeAttribute(importDependencyAttr)));\n        // Check if was already moved to head, to handle the case where the element\n        // has already been moved but it is still loading.\n        if (needsMove && s.parentNode !== document.head) {\n          let rootImport = importForElement(s);\n          while (rootImport && importForElement(rootImport)) {\n            rootImport = importForElement(rootImport);\n          }\n          // Replace the element we're about to move with a placeholder.\n          // NOTE: we first have to append the element to the new parent, then\n          // we can put the placeholder at its place, otherwise load/error events\n          // seem to be fired too early.\n          const parent = s.parentNode,\n            next = s.nextSibling,\n            placeholder = document.createElement(s.localName);\n          // Add reference of the moved element.\n          placeholder['__appliedElement'] = s;\n          // First, re-parent the element...\n          if (rootImport.parentNode === document.head) {\n            document.head.insertBefore(s, rootImport);\n          } else {\n            document.head.appendChild(s);\n          }\n          // ...and then, insert the placeholder at the right place.\n          parent.insertBefore(placeholder, next);\n          // Enable the loading of <link rel=stylesheet>.\n          s.removeAttribute('type');\n        }\n      }\n      return Promise.all(promises);\n    }\n\n    /**\n     * Fires load/error events for loaded imports.\n     */\n    _fireEvents() {\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\n        (document.querySelectorAll(IMPORT_SELECTOR));\n      // Inverse order to have events firing bottom-up.\n      for (let i = n$.length - 1, n; i >= 0 && (n = n$[i]); i--) {\n        // Don't fire twice same event.\n        if (!n['__loaded']) {\n          n['__loaded'] = true;\n          const eventType = n.import ? 'load' : 'error';\n          n.dispatchEvent(new CustomEvent(eventType, {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined\n          }));\n        }\n      }\n    }\n\n    _observe(element) {\n      if (element['__importObserver']) {\n        return;\n      }\n      element['__importObserver'] = new MutationObserver(this._onMutation.bind(this));\n      element['__importObserver'].observe(element, {\n        childList: true,\n        subtree: true\n      });\n    }\n\n    /**\n     * @param {Array<MutationRecord>} mutations\n     */\n    _onMutation(mutations) {\n      for (let j = 0, m; j < mutations.length && (m = mutations[j]); j++) {\n        for (let i = 0, l = m.addedNodes ? m.addedNodes.length : 0; i < l; i++) {\n          const n = /** @type {HTMLLinkElement} */ (m.addedNodes[i]);\n          // NOTE: added scripts are not updating currentScript in IE.\n          // TODO add test w/ script & stylesheet maybe\n          if (n && isImportLink(n)) {\n            this._loader.addNode(n);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  function isImportLink(node) {\n    return node.nodeType === Node.ELEMENT_NODE && MATCHES.call(node, IMPORT_SELECTOR);\n  }\n\n  /**\n   * Waits for an element to finish loading. If already done loading, it will\n   * mark the element accordingly.\n   * @param {!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)} element\n   * @return {Promise}\n   */\n  function whenElementLoaded(element) {\n    if (!element['__loadPromise']) {\n      element['__loadPromise'] = new Promise((resolve) => {\n        if (isElementLoaded(element)) {\n          resolve();\n        } else if (isIE && element.localName === 'style') {\n          // NOTE: We listen only for load events in IE/Edge, because in IE/Edge\n          // <style> with @import will fire error events for each failing @import,\n          // and finally will trigger the load event when all @import are\n          // finished (even if all fail).\n          element.addEventListener('load', resolve);\n        } else {\n          element.addEventListener('load', resolve);\n          element.addEventListener('error', resolve);\n        }\n      }).then(() => {\n        element['__loaded'] = true;\n        return element;\n      });\n    }\n    return element['__loadPromise'];\n  }\n\n  /**\n   * @param {!HTMLElement} el\n   * @return {boolean}\n   */\n  function isElementLoaded(el) {\n    el['__loaded'] = el['__loaded'] ||\n      // Inline scripts don't trigger load/error events, consider them already loaded.\n      (el.localName === 'script' && !( /** @type {!HTMLScriptElement} */ (el).src));\n    return el['__loaded'];\n  }\n\n  /**\n   * Calls the callback when all imports in the document at call time\n   * (or at least document ready) have loaded. Callback is called synchronously\n   * if imports are already done loading.\n   * @param {function()=} callback\n   */\n  function whenReady(callback) {\n    // 1. ensure the document is in a ready state (has dom), then\n    // 2. watch for loading of imports and call callback when done\n    whenDocumentReady(() => whenImportsReady(() => callback && callback()));\n  }\n\n  /**\n   * Invokes the callback when document is in ready state. Callback is called\n   *  synchronously if document is already done loading.\n   * @param {!function()} callback\n   */\n  function whenDocumentReady(callback) {\n    if (document.readyState !== 'loading') {\n      callback();\n    } else {\n      document.addEventListener('readystatechange', function stateChanged() {\n        if (document.readyState !== 'loading') {\n          document.removeEventListener('readystatechange', stateChanged);\n          callback();\n        }\n      });\n    }\n  }\n\n  /**\n   * Invokes the callback after all imports are loaded. Callback is called\n   * synchronously if imports are already done loading.\n   * @param {!function()} callback\n   */\n  function whenImportsReady(callback) {\n    let imports = /** @type {!NodeList<!HTMLLinkElement>} */\n      (document.querySelectorAll(rootImportsSelector));\n    const promises = [];\n    for (let i = 0, l = imports.length, imp; i < l && (imp = imports[i]); i++) {\n      if (!isElementLoaded(imp)) {\n        promises.push(whenElementLoaded(imp));\n      }\n    }\n    if (promises.length) {\n      Promise.all(promises).then(() => callback());\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Returns the link that imported the element.\n   * @param {!Element} element\n   * @return {!HTMLLinkElement|undefined}\n   */\n  function importForElement(element) {\n    let target = element;\n    while ((target = target['__ownerImport'] || target.parentNode || target.host)) {\n      // Found the deepest import.\n      if (isImportLink(target)) {\n        element['__ownerImport'] = /** @type {!HTMLLinkElement} */ (target);\n        break;\n      }\n    }\n    return element['__ownerImport'];\n  }\n\n  /**\n    Add support for the `HTMLImportsLoaded` event and the `HTMLImports.whenReady`\n    method. This api is necessary because unlike the native implementation,\n    script elements do not force imports to resolve. Instead, users should wrap\n    code in either an `HTMLImportsLoaded` handler or after load time in an\n    `HTMLImports.whenReady(callback)` call.\n\n    NOTE: This module also supports these apis under the native implementation.\n    Therefore, if this file is loaded, the same code can be used under both\n    the polyfill and native implementation.\n   */\n  whenReady(() => document.dispatchEvent(new CustomEvent('HTMLImportsLoaded', {\n    cancelable: true,\n    bubbles: true,\n    detail: undefined\n  })));\n\n  if (useNative) {\n    // Listen for load/error events to capture dynamically added scripts.\n    /**\n     * @type {!function(!Event)}\n     */\n    const onLoadingDone = (event) => {\n      const elem = /** @type {!Element} */ (event.target);\n      if (isImportLink(elem)) {\n        elem['__loaded'] = true;\n      }\n    };\n    document.addEventListener('load', onLoadingDone, true /* useCapture */ );\n    document.addEventListener('error', onLoadingDone, true /* useCapture */ );\n  } else {\n    new Importer();\n  }\n\n  // exports\n  scope.useNative = useNative;\n  scope.whenReady = whenReady;\n  scope.importForElement = importForElement;\n\n})(window.HTMLImports = (window.HTMLImports || {}));\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n// given a string of css, return a simple rule tree\nfunction parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\nfunction lex(text) {\n  let root = {\n    start: 0,\n    end: text.length\n  };\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n.rules) {\n        n.rules = [];\n      }\n      let p = n;\n      let previous = p.rules[p.rules.length - 1];\n      n = {\n        start: i + 1,\n        parent: p,\n        previous: previous\n      };\n      p.rules.push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n.end = i + 1;\n      n = n.parent || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\nfunction parseCss(node, text) {\n  let t = text.substring(node.start, node.end - 1);\n  node.parsedCssText = node.cssText = t.trim();\n  if (node.parent) {\n    let ss = node.previous ? node.previous.end : node.parent.start;\n    t = text.substring(ss, node.start - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node.parsedSelector = node.selector = t.trim();\n    node.atRule = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node.atRule) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node.type = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node.type = types.KEYFRAMES_RULE;\n        node.keyframesName =\n          node.selector.split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node.type = types.MIXIN_RULE;\n      } else {\n        node.type = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node.rules;\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n// conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n// expanded form that doesn't require trailing space `\\000033`\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n// stringify parsed css.\nfunction stringify(node, preserveProperties, text) {\n  text = text || '';\n  // calc rule cssText\n  let cssText = '';\n  if (node.cssText || node.rules) {\n    let r$ = node.rules;\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node.cssText :\n        removeCustomProps(node.cssText);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node.selector) {\n      text += node.selector + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node.selector) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\nfunction _hasMixinRules(rules) {\n  return rules[0].selector.indexOf(VAR_START) === 0;\n}\n\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\nfunction removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\nlet types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n};\n\nlet OPEN_BRACE = '{';\nlet CLOSE_BRACE = '}';\n\n// helper regexp's\nlet RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n};\n\nlet VAR_START = '--';\nlet MEDIA_START = '@media';\nlet AT_START = '@';\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet nativeShadow = !(window.ShadyDOM && window.ShadyDOM.inUse);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nlet nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n// experimental support for native @apply\nfunction detectNativeApply() {\n  let style = document.createElement('style');\n  style.textContent = '.foo { @apply --foo }';\n  document.head.appendChild(style);\n  let nativeCssApply = (style.sheet.cssRules[0].cssText.indexOf('apply') >= 0);\n  document.head.removeChild(style);\n  return nativeCssApply;\n}\n\nlet nativeCssApply = false && detectNativeApply();\n\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings.shimcssproperties;\n    nativeShadow = nativeShadow && !settings.shimshadow;\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window.ShadyCSS);\n} else if (window.WebComponents) {\n  parseSettings(window.WebComponents.flags);\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nfunction toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\nfunction rulesForStyle(style) {\n  if (!style.__cssRules && style.textContent) {\n    style.__cssRules = parse(style.textContent);\n  }\n  return style.__cssRules;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\nfunction isKeyframesSelector(rule) {\n  return rule.parent &&\n  rule.parent.type === types.KEYFRAMES_RULE;\n}\n\nfunction forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  if (onlyActiveRules) {\n    if (node.type === types.MEDIA_RULE) {\n      let matchMedia = node.selector.match(rx.MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (node.type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    node.type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (node.type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node.rules;\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\nfunction applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\nfunction applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return target.insertBefore(style, after);\n}\n\nfunction createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\nfunction applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode.nextSibling : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n\n\n// cssBuildTypeForModule: function (module) {\n//   let dm = Polymer.DomModule.import(module);\n//   if (dm) {\n//     return getCssBuildType(dm);\n//   }\n// },\n//\n\n\n// Walk from text[start] matching parens\n// returns position of the outer end paren\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\nfunction setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window.ShadyDOM) {\n    window.ShadyDOM.nativeMethods.setAttribute.call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\nlet rx = {\n  VAR_ASSIGN: /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi,\n  MIXIN_MATCH: /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,\n  VAR_CONSUMED: /(--[\\w-]+)\\s*([:,;)]|$)/gi,\n  ANIMATION_MATCH: /(animation\\s*:)|(animation-name\\s*:)/,\n  MEDIA_MATCH: /@media[^(]*(\\([^)]*\\))/,\n  IS_VAR: /^--/,\n  BRACKETED: /\\{[^}]*\\}/g,\n  HOST_PREFIX: '(?:^|[^.#[:])',\n  HOST_SUFFIX: '($|[.:[\\\\s>+~])'\n};\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  // Given a node and scope name, add a scoping class to each node\n  // in the tree. This facilitates transforming css into scoped rules.\n  dom(node, scope, shouldRemoveScope) {\n    // one time optimization to skip scoping...\n    if (node.__styleScoped) {\n      node.__styleScoped = null;\n    } else {\n      this._transformDom(node, scope || '', shouldRemoveScope);\n    }\n  }\n\n  _transformDom(node, selector, shouldRemoveScope) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      this.element(node, selector, shouldRemoveScope);\n    }\n    let c$ = (node.localName === 'template') ?\n      (node.content || node._content).childNodes :\n      node.children || node.childNodes;\n    if (c$) {\n      for (let i=0; i<c$.length; i++) {\n        this._transformDom(c$[i], selector, shouldRemoveScope);\n      }\n    }\n  }\n\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  elementStyles(element, styleRules, callback) {\n    let cssBuildType = element.__cssBuild;\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    let cssText = (nativeShadow || cssBuildType === 'shady') ?\n    toCssText(styleRules, callback) :\n    this.css(styleRules, element.is, element.extends, callback) + '\\n\\n';\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return toCssText(rules, function(rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? '[is=' +  scope + ']' : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  // transforms a css rule to a scoped rule.\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule.selector = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = rule.selector.split(COMPLEX_SELECTOR_SEP);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.join(COMPLEX_SELECTOR_SEP);\n  }\n\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`);\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir) =>\n      `[dir=\"${dir}\"] ${before}, ${before}[dir=\"${dir}\"]`);\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    let p$ = selector.split(PSEUDO_PREFIX);\n    p$[0] += scope;\n    return p$.join(PSEUDO_PREFIX);\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule.selector = rule.parsedSelector;\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  normalizeRootSelector(rule) {\n    if (rule.selector === ROOT) {\n      rule.selector = 'html';\n    }\n  }\n\n  _transformDocumentSelector(selector) {\n    return selector.match(SLOTTED) ?\n      this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR) :\n      this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n  }\n}\n\nlet NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nlet SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nlet COMPLEX_SELECTOR_SEP = ',';\nlet SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g;\nlet SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nlet HOST = ':host';\nlet ROOT = ':root';\nlet SLOTTED = '::slotted';\nlet SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nlet HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nlet SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nlet DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)/;\nlet CSS_CLASS_PREFIX = '.';\nlet PSEUDO_PREFIX = ':';\nlet CLASS = 'class';\nlet SELECTOR_NO_MATCH = 'should_not_match';\n\nvar StyleTransformer$1 = new StyleTransformer();\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nvar templateMap = {};\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nconst promise = Promise.resolve();\n\nclass StyleInfo {\n  static get(node) {\n    return node.__styleInfo;\n  }\n  static set(node, styleInfo) {\n    node.__styleInfo = styleInfo;\n    return styleInfo;\n  }\n  static invalidate(elementName) {\n    if (templateMap[elementName]) {\n      templateMap[elementName]._applyShimInvalid = true;\n    }\n  }\n  /*\n  the template is marked as `validating` for one microtask so that all instances\n  found in the tree crawl of `applyStyle` will update themselves,\n  but the template will only be updated once.\n  */\n  static startValidating(elementName) {\n    const template = templateMap[elementName];\n    if (!template._validating) {\n      template._validating = true;\n      promise.then(() => {\n        template._applyShimInvalid = false;\n        template._validating = false;\n      });\n    }\n  }\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    this.styleRules = ast || null;\n    this.placeholder = placeholder || null;\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    this.overrideStyleProperties = null;\n    this.elementName = elementName || '';\n    this.cssBuild = cssBuild || '';\n    this.typeExtension = typeExtension || '';\n    this.styleProperties = null;\n    this.scopeSelector = null;\n    this.customStyle = null;\n  }\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// TODO: dedupe with shady\nconst p = window.Element.prototype;\nconst matchesSelector = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n  // decorates styles with rule info and returns an array of used style\n  // property names\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule.rules = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx$$1 = rx.VAR_ASSIGN;\n      let cssText = rule.parsedCssText;\n      let value;\n      let any;\n      while ((m = rx$$1.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule.parsedCssText);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(rx.BRACKETED, '')\n      .replace(rx.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = rx.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        rx.MIXIN_MATCH.lastIndex = 0;\n        m = rx.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule.cssText = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule.cssText;\n    let output = rule.cssText;\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = rx.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule.cssText = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  propertyDataFromStyles(rules, element) {\n    let props = {}, self = this;\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    forEachRule(rules, function(rule) {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        self.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule.parsedSelector;\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          self.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let hostScope = scope.is ?\n    StyleTransformer$1._calcHostScope(scope.is, scope.extends) :\n    'html';\n    let parsedSelector = rule.parsedSelector;\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (cssBuild === 'shadow') {\n      isRoot = parsedSelector === ':host > *' || parsedSelector === 'html';\n      isHost = isHost && !isRoot;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host under ShadowDOM because `:host` does not work with `matches`\n      if (nativeShadow && !rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer$1._transformRuleCss(\n          rule,\n          StyleTransformer$1._transformComplexSelector,\n          StyleTransformer$1._calcElementScope(scope.is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n\n  hostAndRootPropertiesForScope(scope, rules) {\n    let hostProps = {}, rootProps = {}, self = this;\n    // note: active rules excludes non-matching @media rules\n    let cssBuild = rules && rules.__cssBuild;\n    forEachRule(rules, function(rule) {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      self.whenHostOrRootRule(scope, rule, cssBuild, function(info) {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            self.collectProperties(rule, hostProps);\n          } else {\n            self.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let hostSelector = StyleTransformer$1\n      ._calcHostScope(element.is, element.extends);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(rx.HOST_PREFIX + rxHostSelector +\n      rx.HOST_SUFFIX);\n    let rules = StyleInfo.get(element).styleRules;\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer$1.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !isKeyframesSelector(rule) &&\n          rule.cssText) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    });\n  }\n\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule.keyframesName] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n  // Transforms `@keyframes` names to be unique for the current host.\n  // Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n  _scopeKeyframes(rule, scopeId) {\n    rule.keyframesNameRx = new RegExp(rule.keyframesName, 'g');\n    rule.transformedKeyframesName = rule.keyframesName + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    rule.selector = rule.transformedSelector.replace(\n        rule.keyframesName, rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = selector.split(',');\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule.selector = parts.join(',');\n  }\n\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      setElementClassRaw(element, v);\n    }\n  }\n\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s._useCount--;\n      if (s._useCount <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        applyStyle(style, null, styleInfo.placeholder);\n      }\n\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style._useCount = style._useCount || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style._useCount++;\n      }\n      styleInfo.customStyle = style;\n    }\n    // @media rules may be stale in IE 10 and 11\n    if (IS_IE) {\n      style.textContent = style.textContent;\n    }\n    return style;\n  }\n\n  applyCustomStyle(style, properties) {\n    let rules = rulesForStyle(style);\n    let self = this;\n    style.textContent = toCssText(rules, function(rule) {\n      let css = rule.cssText = rule.parsedCssText;\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(css);\n        // replace with reified properties, scenario is same as mixin\n        rule.cssText = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nvar StyleProperties$1 = new StyleProperties();\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet placeholderMap = {};\n\nconst ce = window.customElements;\nif (ce && !nativeShadow) {\n  const origDefine = ce.define;\n  ce.define = function(name, clazz, options) {\n    placeholderMap[name] = applyStylePlaceHolder(name);\n    return origDefine.call(ce, name, clazz, options);\n  };\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nclass StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    @apply --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\nlet MIXIN_MATCH = rx.MIXIN_MATCH;\nlet VAR_ASSIGN = rx.VAR_ASSIGN;\n\nlet APPLY_NAME_CLEAN = /;\\s*/m;\nlet INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nlet MIXIN_VAR_SEP = '_-_';\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    this._map = {};\n  }\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    };\n  }\n  get(name) {\n    name = name.trim();\n    return this._map[name];\n  }\n}\n\nclass ApplyShim {\n  constructor() {\n    this._currentTemplate = null;\n    this._measureElement = null;\n    this._map = new MixinMap();\n    this._separator = MIXIN_VAR_SEP;\n    this._boundProduceCssProperties = (\n      matchText, propertyName, valueProperty, valueMixin) =>\n        this._produceCssProperties(\n          matchText, propertyName, valueProperty, valueMixin);\n  }\n  // return true if `cssText` contains a mixin definition or consumption\n  detectMixin(cssText) {\n    const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n    // reset state of the regexes\n    MIXIN_MATCH.lastIndex = 0;\n    VAR_ASSIGN.lastIndex = 0;\n    return has;\n  }\n  transformStyle(style, elementName) {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    return ast;\n  }\n  transformRules(rules, elementName) {\n    this._currentTemplate = templateMap[elementName];\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentTemplate = null;\n  }\n  transformRule(rule) {\n    rule.cssText = this.transformCssText(rule.parsedCssText);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule.selector === ':root') {\n      rule.selector = ':host > *';\n    }\n  }\n  transformCssText(cssText) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, this._boundProduceCssProperties);\n    // consume mixins\n    return this._consumeCssProperties(cssText);\n  }\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = document.createElement('meta');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  // replace mixin consumption with variable consumption\n  _consumeCssProperties(text) {\n    let m;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = this._cssTextToMap(textBeforeApply);\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = [textBeforeApply, replacement, textAfterApply].join('');\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  // produce variable consumption at the site of mixin consumption\n  // @apply --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n  // Example:\n  // border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentTemplate) {\n        mixinEntry.dependants[this._currentTemplate.name] = this._currentTemplate;\n      }\n      let p, parts, f;\n      for (p in mixinEntry.properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f);\n        }\n        parts.push(')');\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = ApplyShim._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  // \"parse\" a mixin definition into a map of properties and values\n  // cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n  _cssTextToMap(text) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  _invalidateMixinEntry(mixinEntry) {\n    for (let elementName in mixinEntry.dependants) {\n      if (!this._currentTemplate || elementName !== this._currentTemplate.name) {\n        StyleInfo.invalidate(elementName);\n      }\n    }\n  }\n\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = '@apply ' + value + ';';\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties(valueMixin);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    let mixinValues = this._cssTextToMap(mixinAsProperties);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(propertyName + MIXIN_VAR_SEP + p + ': ' + v);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = matchText + ';' + prefix;\n    }\n    return prefix + out.join('; ') + ';';\n  }\n}\n\nlet applyShim = new ApplyShim();\nwindow['ApplyShim'] = applyShim;\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet flush = function() {};\n\nif (!nativeShadow) {\n  let elementNeedsScoping = (element) => {\n    return (element.classList &&\n      !element.classList.contains(StyleTransformer$1.SCOPE_NAME) ||\n      // note: necessary for IE11\n      (element instanceof SVGElement && (!element.hasAttribute('class') ||\n      element.getAttribute('class').indexOf(StyleTransformer$1.SCOPE_NAME) < 0)));\n  };\n\n  let handler = (mxns) => {\n    for (let x=0; x < mxns.length; x++) {\n      let mxn = mxns[x];\n      if (mxn.target === document.documentElement ||\n        mxn.target === document.head) {\n        continue;\n      }\n      for (let i=0; i < mxn.addedNodes.length; i++) {\n        let n = mxn.addedNodes[i];\n        if (elementNeedsScoping(n)) {\n          let root = n.getRootNode();\n          if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // may no longer be in a shadowroot\n            let host = root.host;\n            if (host) {\n              let scope = host.is || host.localName;\n              StyleTransformer$1.dom(n, scope);\n            }\n          }\n        }\n      }\n      for (let i=0; i < mxn.removedNodes.length; i++) {\n        let n = mxn.removedNodes[i];\n        if (n.nodeType === Node.ELEMENT_NODE) {\n          let classes = undefined;\n          if (n.classList) {\n            classes = Array.from(n.classList);\n          } else if (n.hasAttribute('class')) {\n            classes = n.getAttribute('class').split(/\\s+/);\n          }\n          if (classes !== undefined) {\n            // NOTE: relies on the scoping class always being adjacent to the\n            // SCOPE_NAME class.\n            let classIdx = classes.indexOf(StyleTransformer$1.SCOPE_NAME);\n            if (classIdx >= 0) {\n              let scope = classes[classIdx + 1];\n              if (scope) {\n                StyleTransformer$1.dom(n, scope, true);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  };\n  let nativeCustomElements = (window.customElements &&\n    !window.customElements.flush);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    };\n    // use polyfill timing if it's available\n    if (window.HTMLImports) {\n      window.HTMLImports.whenReady(delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          };\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  };\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// TODO(dfreedm): consider spliting into separate global\nlet styleCache = new StyleCache();\n\nclass ShadyCSS {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = document.documentElement;\n    this._documentOwnerStyleInfo = StyleInfo.set(document.documentElement, new StyleInfo({rules: []}));\n    this._elementsHaveApplied = false;\n  }\n  get nativeShadow() {\n    return nativeShadow;\n  }\n  get nativeCss() {\n    return nativeCssVariables;\n  }\n  get nativeCssApply() {\n    return nativeCssApply;\n  }\n  flush() {\n    flush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return toCssText(ast);\n  }\n  _gatherStyles(template) {\n    let styles = template.content.querySelectorAll('style');\n    let cssText = [];\n    for (let i = 0; i < styles.length; i++) {\n      let s = styles[i];\n      cssText.push(s.textContent);\n      s.parentNode.removeChild(s);\n    }\n    return cssText.join('').trim();\n  }\n  _getCssBuild(template) {\n    let style = template.content.querySelector('style');\n    if (!style) {\n      return '';\n    }\n    return style.getAttribute('css-build') || '';\n  }\n  prepareTemplate(template, elementName, typeExtension) {\n    if (template._prepared) {\n      return;\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = this._getCssBuild(template);\n    let cssText = this._gatherStyles(template);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n      __cssBuild: cssBuild,\n    };\n    if (!this.nativeShadow) {\n      StyleTransformer$1.dom(template.content, elementName);\n    }\n    // check if the styling has mixin definitions or uses\n    let hasMixins = applyShim.detectMixin(cssText);\n    let ast = parse(cssText);\n    // only run the applyshim transforms if there is a mixin involved\n    if (hasMixins && this.nativeCss && !this.nativeCssApply) {\n      applyShim.transformRules(ast, elementName);\n    }\n    template._styleAst = ast;\n\n    let ownPropertyNames = [];\n    if (!this.nativeCss) {\n      ownPropertyNames = StyleProperties$1.decorateStyles(template._styleAst, info);\n    }\n    if (!ownPropertyNames.length || this.nativeCss) {\n      let root = this.nativeShadow ? template.content : null;\n      let placeholder = placeholderMap[elementName];\n      let style = this._generateStaticStyle(info, template._styleAst, root, placeholder);\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n  _generateStaticStyle(info, rules, shadowroot, placeholder) {\n    let cssText = StyleTransformer$1.elementStyles(info, rules);\n    if (cssText.length) {\n      return applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n  }\n  _prepareHost(host) {\n    let is = host.getAttribute('is') || host.localName;\n    let typeExtension;\n    if (is !== host.localName) {\n      typeExtension = host.localName;\n    }\n    let placeholder = placeholderMap[is];\n    let template = templateMap[is];\n    let ast;\n    let ownStylePropertyNames;\n    let cssBuild;\n    if (template) {\n      ast = template._styleAst;\n      ownStylePropertyNames = template._ownPropertyNames;\n      cssBuild = template._cssBuild;\n    }\n    return StyleInfo.set(host,\n      new StyleInfo(\n        ast,\n        placeholder,\n        ownStylePropertyNames,\n        is,\n        typeExtension,\n        cssBuild\n      )\n    );\n  }\n  applyStyle(host, overrideProps) {\n    let is = host.getAttribute('is') || host.localName;\n    let styleInfo = StyleInfo.get(host);\n    let hasApplied = Boolean(styleInfo);\n    if (!styleInfo) {\n      styleInfo = this._prepareHost(host);\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (window.CustomStyle) {\n      let CS = window.CustomStyle;\n      if (CS._documentDirty) {\n        CS.findStyles();\n        if (!this.nativeCss) {\n          this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n        } else if (!this.nativeCssApply) {\n          CS._revalidateApplyShim();\n        }\n        CS.applyStyles();\n        // if no elements have booted yet, we can just update the document and be done\n        if (!this._elementsHaveApplied) {\n          return;\n        }\n        // if no native css custom properties, we must recalculate the whole tree\n        if (!this.nativeCss) {\n          this.updateStyles();\n          /*\n          When updateStyles() runs, this element may not have a shadowroot yet.\n          If not, we need to make sure that this element runs `applyStyle` on itself at least once to generate a style\n          */\n          if (hasApplied) {\n            return;\n          }\n        }\n      }\n    }\n    if (overrideProps) {\n      styleInfo.overrideStyleProperties =\n        styleInfo.overrideStyleProperties || {};\n      Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n    }\n    if (this.nativeCss) {\n      if (styleInfo.overrideStyleProperties) {\n        this._updateNativeProperties(host, styleInfo.overrideStyleProperties);\n      }\n      let template = templateMap[is];\n      // bail early if there is no shadowroot for this element\n      if (!template && !this._isRootOwner(host)) {\n        return;\n      }\n      if (template && template._applyShimInvalid && template._style) {\n        // update template\n        if (!template._validating) {\n          applyShim.transformRules(template._styleAst, is);\n          template._style.textContent = StyleTransformer$1.elementStyles(host, styleInfo.styleRules);\n          StyleInfo.startValidating(is);\n        }\n        // update instance if native shadowdom\n        if (this.nativeShadow) {\n          let root = host.shadowRoot;\n          if (root) {\n            let style = root.querySelector('style');\n            style.textContent = StyleTransformer$1.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n        styleInfo.styleRules = template._styleAst;\n      }\n    } else {\n      this._updateProperties(host, styleInfo);\n      if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n        this._applyStyleProperties(host, styleInfo);\n      }\n    }\n    if (hasApplied) {\n      let root = this._isRootOwner(host) ? host : host.shadowRoot;\n      // note: some elements may not have a root!\n      if (root) {\n        this._applyToDescendants(root);\n      }\n    }\n  }\n  _applyToDescendants(root) {\n    let c$ = root.children;\n    for (let i = 0, c; i < c$.length; i++) {\n      c = c$[i];\n      if (c.shadowRoot) {\n        this.applyStyle(c);\n      }\n      this._applyToDescendants(c);\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = node.getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = host.getAttribute('is') || host.localName;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties$1.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!this.nativeShadow) {\n      StyleProperties$1.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties$1.hostAndRootPropertiesForScope(host, styleInfo.styleRules);\n    let propertyData = StyleProperties$1.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties;\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties$1.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  _updateNativeProperties(element, properties) {\n    // remove previous properties\n    for (let p in properties) {\n      // NOTE: for bc with shim, don't apply null values.\n      if (p === null) {\n        element.style.removeProperty(p);\n      } else {\n        element.style.setProperty(p, properties[p]);\n      }\n    }\n  }\n  updateStyles(properties) {\n    this.applyStyle(this._documentOwner, properties);\n  }\n  /* Custom Style operations */\n  _transformCustomStyleForDocument(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer$1.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer$1.documentRule(rule);\n      }\n      if (this.nativeCss && !this.nativeCssApply) {\n        applyShim.transformRule(rule);\n      }\n    });\n    if (this.nativeCss) {\n      style.textContent = toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules.rules.push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (this.nativeCss && !this.nativeCssApply) {\n      let ast = rulesForStyle(style);\n      applyShim.transformRules(ast);\n      style.textContent = toCssText(ast);\n    }\n  }\n  _applyCustomStyleToDocument(style) {\n    if (!this.nativeCss) {\n      StyleProperties$1.applyCustomStyle(style, this._documentOwnerStyleInfo.styleProperties);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!this.nativeCss) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value.trim();\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = element.getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer$1.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer$1.SCOPE_NAME, scopeName);\n    }\n    if (!this.nativeCss) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties$1.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n}\n\nwindow['ShadyCSS'] = new ShadyCSS();\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nWrapper over <style> elements to co-operate with ShadyCSS\n\nExample:\n<custom-style>\n  <style>\n  ...\n  </style>\n</custom-style>\n*/\n\nlet ShadyCSS$1 = window.ShadyCSS;\n\nlet enqueued = false;\n\nlet customStyles = [];\n\nlet hookFn = null;\n\n/*\nIf a page only has <custom-style> elements, it will flash unstyled content,\nas all the instances will boot asynchronously after page load.\n\nCalling ShadyCSS.updateStyles() will force the work to happen synchronously\n*/\nfunction enqueueDocumentValidation() {\n  if (enqueued) {\n    return;\n  }\n  enqueued = true;\n  if (window.HTMLImports) {\n    window.HTMLImports.whenReady(validateDocument);\n  } else if (document.readyState === 'complete') {\n    validateDocument();\n  } else {\n    document.addEventListener('readystatechange', () => {\n      if (document.readyState === 'complete') {\n        validateDocument();\n      }\n    });\n  }\n}\n\nfunction validateDocument() {\n  requestAnimationFrame(() => {\n    if (enqueued || ShadyCSS$1._elementsHaveApplied) {\n      ShadyCSS$1.updateStyles();\n    }\n    enqueued = false;\n  });\n}\n\nclass CustomStyle extends HTMLElement {\n  static get _customStyles() {\n    return customStyles;\n  }\n  static get processHook() {\n    return hookFn;\n  }\n  static set processHook(fn) {\n    hookFn = fn;\n  }\n  static get _documentDirty() {\n    return enqueued;\n  }\n  static findStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (!c._style) {\n        let style = c.querySelector('style');\n        if (!style) {\n          continue;\n        }\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        if (style.__appliedElement) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            style.__appliedElement.setAttribute(attr.name, attr.value);\n          }\n        }\n        c._style = style.__appliedElement || style;\n        if (hookFn) {\n          hookFn(c._style);\n        }\n        ShadyCSS$1._transformCustomStyleForDocument(c._style);\n      }\n    }\n  }\n  static _revalidateApplyShim() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS$1._revalidateApplyShim(c._style);\n      }\n    }\n  }\n  static applyStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS$1._applyCustomStyleToDocument(c._style);\n      }\n    }\n    enqueued = false;\n  }\n  constructor() {\n    super();\n    customStyles.push(this);\n    enqueueDocumentValidation();\n  }\n}\n\nwindow['CustomStyle'] = CustomStyle;\nwindow.customElements.define('custom-style', CustomStyle);\n\n/**\n * @license\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n(function(scope) {\n\n  'use strict';\n\n  HTMLImports.whenReady(function() {\n    requestAnimationFrame(function() {\n      window.dispatchEvent(new CustomEvent('WebComponentsReady'));\n    });\n  });\n\n})(window.WebComponents);\n\n/**\n * @license\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n(function(scope) {\n\n  // It's desireable to provide a default stylesheet\n  // that's convenient for styling unresolved elements, but\n  // it's cumbersome to have to include this manually in every page.\n  // It would make sense to put inside some HTMLImport but\n  // the HTMLImports polyfill does not allow loading of stylesheets\n  // that block rendering. Therefore this injection is tolerated here.\n  //\n  // NOTE: position: relative fixes IE's failure to inherit opacity\n  // when a child is not statically positioned.\n  var style = document.createElement('style');\n  style.textContent = ''\n      + 'body {'\n      + 'transition: opacity ease-in 0.2s;'\n      + ' } \\n'\n      + 'body[unresolved] {'\n      + 'opacity: 0; display: block; overflow: hidden; position: relative;'\n      + ' } \\n'\n      ;\n  var head = document.querySelector('head');\n  head.insertBefore(style, head.firstChild);\n\n})(window.WebComponents);\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * Polyfills loaded: HTML Imports\n * Used in: Safari Tech Preview\n */\n\n//TODO(notwaldorf): this is temporary and should be removed.\n\n}());\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n// given a string of css, return a simple rule tree\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\nfunction lex(text) {\n  let root = {\n    start: 0,\n    end: text.length\n  };\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n.rules) {\n        n.rules = [];\n      }\n      let p = n;\n      let previous = p.rules[p.rules.length - 1];\n      n = {\n        start: i + 1,\n        parent: p,\n        previous: previous\n      };\n      p.rules.push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n.end = i + 1;\n      n = n.parent || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\nfunction parseCss(node, text) {\n  let t = text.substring(node.start, node.end - 1);\n  node.parsedCssText = node.cssText = t.trim();\n  if (node.parent) {\n    let ss = node.previous ? node.previous.end : node.parent.start;\n    t = text.substring(ss, node.start - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node.parsedSelector = node.selector = t.trim();\n    node.atRule = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node.atRule) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node.type = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node.type = types.KEYFRAMES_RULE;\n        node.keyframesName =\n          node.selector.split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node.type = types.MIXIN_RULE;\n      } else {\n        node.type = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node.rules;\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n// conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n// expanded form that doesn't require trailing space `\\000033`\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n// stringify parsed css.\nexport function stringify(node, preserveProperties, text) {\n  text = text || '';\n  // calc rule cssText\n  let cssText = '';\n  if (node.cssText || node.rules) {\n    let r$ = node.rules;\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node.cssText :\n        removeCustomProps(node.cssText);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node.selector) {\n      text += node.selector + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node.selector) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\nfunction _hasMixinRules(rules) {\n  return rules[0].selector.indexOf(VAR_START) === 0;\n}\n\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\nexport let types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nlet OPEN_BRACE = '{';\nlet CLOSE_BRACE = '}';\n\n// helper regexp's\nlet RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nlet VAR_START = '--';\nlet MEDIA_START = '@media';\nlet AT_START = '@';\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport let nativeShadow = !(window.ShadyDOM && window.ShadyDOM.inUse);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nexport let nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n// experimental support for native @apply\nfunction detectNativeApply() {\n  let style = document.createElement('style');\n  style.textContent = '.foo { @apply --foo }';\n  document.head.appendChild(style);\n  let nativeCssApply = (style.sheet.cssRules[0].cssText.indexOf('apply') >= 0);\n  document.head.removeChild(style);\n  return nativeCssApply;\n}\n\nexport let nativeCssApply = false && detectNativeApply();\n\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings.shimcssproperties;\n    nativeShadow = nativeShadow && !settings.shimshadow;\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window.ShadyCSS);\n} else if (window.WebComponents) {\n  parseSettings(window.WebComponents.flags);\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables} from './style-settings'\nimport {parse, stringify, types} from './css-parse'\n\nexport function toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\nexport function rulesForStyle(style) {\n  if (!style.__cssRules && style.textContent) {\n    style.__cssRules = parse(style.textContent);\n  }\n  return style.__cssRules;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\nexport function isKeyframesSelector(rule) {\n  return rule.parent &&\n  rule.parent.type === types.KEYFRAMES_RULE;\n}\n\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  if (onlyActiveRules) {\n    if (node.type === types.MEDIA_RULE) {\n      let matchMedia = node.selector.match(rx.MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (node.type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    node.type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (node.type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node.rules;\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return target.insertBefore(style, after);\n}\n\nexport function createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode.nextSibling : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n// cssBuildTypeForModule: function (module) {\n//   let dm = Polymer.DomModule.import(module);\n//   if (dm) {\n//     return getCssBuildType(dm);\n//   }\n// },\n//\nexport function getCssBuildType(element) {\n  return element.getAttribute('css-build');\n}\n\n// Walk from text[start] matching parens\n// returns position of the outer end paren\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window.ShadyDOM) {\n    window.ShadyDOM.nativeMethods.setAttribute.call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\nexport let rx = {\n  VAR_ASSIGN: /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi,\n  MIXIN_MATCH: /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,\n  VAR_CONSUMED: /(--[\\w-]+)\\s*([:,;)]|$)/gi,\n  ANIMATION_MATCH: /(animation\\s*:)|(animation-name\\s*:)/,\n  MEDIA_MATCH: /@media[^(]*(\\([^)]*\\))/,\n  IS_VAR: /^--/,\n  BRACKETED: /\\{[^}]*\\}/g,\n  HOST_PREFIX: '(?:^|[^.#[:])',\n  HOST_SUFFIX: '($|[.:[\\\\s>+~])'\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {removeCustomPropAssignment} from './css-parse'\nimport {nativeShadow} from './style-settings'\nimport StyleTransformer from './style-transformer'\nimport * as StyleUtil from './style-util'\nimport StyleInfo from './style-info'\n\n// TODO: dedupe with shady\nconst p = window.Element.prototype;\nconst matchesSelector = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n  // decorates styles with rule info and returns an array of used style\n  // property names\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    StyleUtil.forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule.rules = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx = StyleUtil.rx.VAR_ASSIGN;\n      let cssText = rule.parsedCssText;\n      let value;\n      let any;\n      while ((m = rx.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule.parsedCssText);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(StyleUtil.rx.BRACKETED, '')\n      .replace(StyleUtil.rx.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = StyleUtil.rx.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = StyleUtil.processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        StyleUtil.rx.MIXIN_MATCH.lastIndex = 0;\n        m = StyleUtil.rx.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule.cssText = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule.cssText;\n    let output = rule.cssText;\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = StyleUtil.rx.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule.cssText = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  propertyDataFromStyles(rules, element) {\n    let props = {}, self = this;\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, function(rule) {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        self.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule.parsedSelector;\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          self.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let hostScope = scope.is ?\n    StyleTransformer._calcHostScope(scope.is, scope.extends) :\n    'html';\n    let parsedSelector = rule.parsedSelector;\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (cssBuild === 'shadow') {\n      isRoot = parsedSelector === ':host > *' || parsedSelector === 'html';\n      isHost = isHost && !isRoot;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host under ShadowDOM because `:host` does not work with `matches`\n      if (nativeShadow && !rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer._transformRuleCss(\n          rule,\n          StyleTransformer._transformComplexSelector,\n          StyleTransformer._calcElementScope(scope.is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n\n  hostAndRootPropertiesForScope(scope, rules) {\n    let hostProps = {}, rootProps = {}, self = this;\n    // note: active rules excludes non-matching @media rules\n    let cssBuild = rules && rules.__cssBuild;\n    StyleUtil.forEachRule(rules, function(rule) {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      self.whenHostOrRootRule(scope, rule, cssBuild, function(info) {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            self.collectProperties(rule, hostProps);\n          } else {\n            self.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let hostSelector = StyleTransformer\n      ._calcHostScope(element.is, element.extends);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(StyleUtil.rx.HOST_PREFIX + rxHostSelector +\n      StyleUtil.rx.HOST_SUFFIX);\n    let rules = StyleInfo.get(element).styleRules;\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !StyleUtil.isKeyframesSelector(rule) &&\n          rule.cssText) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    });\n  }\n\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule.keyframesName] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n  // Transforms `@keyframes` names to be unique for the current host.\n  // Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n  _scopeKeyframes(rule, scopeId) {\n    rule.keyframesNameRx = new RegExp(rule.keyframesName, 'g');\n    rule.transformedKeyframesName = rule.keyframesName + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    rule.selector = rule.transformedSelector.replace(\n        rule.keyframesName, rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = selector.split(',');\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule.selector = parts.join(',');\n  }\n\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      StyleUtil.setElementClassRaw(element, v);\n    }\n  }\n\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s._useCount--;\n      if (s._useCount <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = StyleUtil.applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = StyleUtil.applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        StyleUtil.applyStyle(style, null, styleInfo.placeholder);\n      }\n\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style._useCount = style._useCount || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style._useCount++;\n      }\n      styleInfo.customStyle = style;\n    }\n    // @media rules may be stale in IE 10 and 11\n    if (IS_IE) {\n      style.textContent = style.textContent;\n    }\n    return style;\n  }\n\n  applyCustomStyle(style, properties) {\n    let rules = StyleUtil.rulesForStyle(style);\n    let self = this;\n    style.textContent = StyleUtil.toCssText(rules, function(rule) {\n      let css = rule.cssText = rule.parsedCssText;\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(css);\n        // replace with reified properties, scenario is same as mixin\n        rule.cssText = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nexport default new StyleProperties();","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nWrapper over <style> elements to co-operate with ShadyCSS\n\nExample:\n<custom-style>\n  <style>\n  ...\n  </style>\n</custom-style>\n*/\n\n'use strict';\n\nlet ShadyCSS = window.ShadyCSS;\n\nlet enqueued = false;\n\nlet customStyles = [];\n\nlet hookFn = null;\n\n/*\nIf a page only has <custom-style> elements, it will flash unstyled content,\nas all the instances will boot asynchronously after page load.\n\nCalling ShadyCSS.updateStyles() will force the work to happen synchronously\n*/\nfunction enqueueDocumentValidation() {\n  if (enqueued) {\n    return;\n  }\n  enqueued = true;\n  if (window.HTMLImports) {\n    window.HTMLImports.whenReady(validateDocument);\n  } else if (document.readyState === 'complete') {\n    validateDocument();\n  } else {\n    document.addEventListener('readystatechange', () => {\n      if (document.readyState === 'complete') {\n        validateDocument();\n      }\n    });\n  }\n}\n\nfunction validateDocument() {\n  requestAnimationFrame(() => {\n    if (enqueued || ShadyCSS._elementsHaveApplied) {\n      ShadyCSS.updateStyles();\n    }\n    enqueued = false;\n  });\n}\n\nclass CustomStyle extends HTMLElement {\n  static get _customStyles() {\n    return customStyles;\n  }\n  static get processHook() {\n    return hookFn;\n  }\n  static set processHook(fn) {\n    hookFn = fn;\n  }\n  static get _documentDirty() {\n    return enqueued;\n  }\n  static findStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (!c._style) {\n        let style = c.querySelector('style');\n        if (!style) {\n          continue;\n        }\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        if (style.__appliedElement) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            style.__appliedElement.setAttribute(attr.name, attr.value);\n          }\n        }\n        c._style = style.__appliedElement || style;\n        if (hookFn) {\n          hookFn(c._style);\n        }\n        ShadyCSS._transformCustomStyleForDocument(c._style);\n      }\n    }\n  }\n  static _revalidateApplyShim() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS._revalidateApplyShim(c._style);\n      }\n    }\n  }\n  static applyStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS._applyCustomStyleToDocument(c._style);\n      }\n    }\n    enqueued = false;\n  }\n  constructor() {\n    super();\n    customStyles.push(this);\n    enqueueDocumentValidation();\n  }\n}\n\nwindow['CustomStyle'] = CustomStyle;\nwindow.customElements.define('custom-style', CustomStyle);","/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n(function(scope) {\n\n  /********************* base setup *********************/\n  const IMPORT_SELECTOR = 'link[rel=import]';\n  const useNative = Boolean('import' in document.createElement('link'));\n\n  // Polyfill `currentScript` for browsers without it.\n  let currentScript = null;\n  if ('currentScript' in document === false) {\n    Object.defineProperty(document, 'currentScript', {\n      get: function() {\n        return currentScript ||\n          // NOTE: only works when called in synchronously executing code.\n          // readyState should check if `loading` but IE10 is\n          // interactive when scripts run so we cheat. This is not needed by\n          // html-imports polyfill but helps generally polyfill `currentScript`.\n          (document.readyState !== 'complete' ?\n            document.scripts[document.scripts.length - 1] : null);\n      },\n      configurable: true\n    });\n  }\n\n  /********************* path fixup *********************/\n  const ABS_URL_TEST = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n  const CSS_URL_REGEXP = /(url\\()([^)]*)(\\))/g;\n  const CSS_IMPORT_REGEXP = /(@import[\\s]+(?!url\\())([^;]*)(;)/g;\n  const STYLESHEET_REGEXP = /(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g;\n\n\n  // path fixup: style elements in imports must be made relative to the main\n  // document. We fixup url's in url() and @import.\n  const Path = {\n\n    fixUrls: function(element, base) {\n      if (element.href) {\n        element.setAttribute('href',\n          Path.replaceAttrUrl(element.getAttribute('href'), base));\n      }\n      if (element.src) {\n        element.setAttribute('src',\n          Path.replaceAttrUrl(element.getAttribute('src'), base));\n      }\n      if (element.localName === 'style') {\n        Path.resolveUrlsInStyle(element, base);\n      } else if (element.localName === 'script' && element.textContent) {\n        element.textContent += `\\n//# sourceURL=${base}`;\n      }\n    },\n\n    fixUrlAttributes: function(element, base) {\n      const attrs = ['action', 'src', 'href', 'url', 'style'];\n      for (let i = 0, a; i < attrs.length && (a = attrs[i]); i++) {\n        const at = element.attributes[a];\n        const v = at && at.value;\n        if (v && (v.search(/({{|\\[\\[)/) < 0)) {\n          at.value = (a === 'style') ?\n            Path.resolveUrlsInCssText(v, base) :\n            Path.replaceAttrUrl(v, base);\n        }\n      }\n    },\n\n    fixUrlsInTemplates: function(element, base) {\n      const t$ = element.querySelectorAll('template');\n      for (let i = 0; i < t$.length; i++) {\n        Path.fixUrlsInTemplate(t$[i], base);\n      }\n    },\n\n    fixUrlsInTemplate: function(template, base) {\n      const content = template.content;\n      if (!content) { // Template not supported.\n        return;\n      }\n      const n$ = content.querySelectorAll(\n        'style, form[action], [src], [href], [url], [style]');\n      for (let i = 0; i < n$.length; i++) {\n        const n = n$[i];\n        if (n.localName == 'style') {\n          Path.resolveUrlsInStyle(n, base);\n        } else {\n          Path.fixUrlAttributes(n, base);\n        }\n      }\n      Path.fixUrlsInTemplates(content, base);\n    },\n\n    resolveUrlsInStyle: function(style, linkUrl) {\n      style.textContent = Path.resolveUrlsInCssText(style.textContent, linkUrl);\n    },\n\n    resolveUrlsInCssText: function(cssText, linkUrl) {\n      let r = Path.replaceUrls(cssText, linkUrl, CSS_URL_REGEXP);\n      r = Path.replaceUrls(r, linkUrl, CSS_IMPORT_REGEXP);\n      return r;\n    },\n\n    replaceUrls: function(text, linkUrl, regexp) {\n      return text.replace(regexp, function(m, pre, url, post) {\n        let urlPath = url.replace(/[\"']/g, '');\n        if (linkUrl) {\n          urlPath = Path._resolveUrl(urlPath, linkUrl);\n        }\n        return pre + '\\'' + urlPath + '\\'' + post;\n      });\n    },\n\n    replaceAttrUrl: function(text, linkUrl) {\n      if (text && ABS_URL_TEST.test(text)) {\n        return text;\n      } else {\n        return Path._resolveUrl(text, linkUrl);\n      }\n    },\n\n    _resolveUrl: function(url, base) {\n      // Lazy feature detection.\n      if (Path.__workingURL === undefined) {\n        Path.__workingURL = false;\n        try {\n          const u = new URL('b', 'http://a');\n          u.pathname = 'c%20d';\n          Path.__workingURL = (u.href === 'http://a/c%20d');\n        } catch (e) {}\n      }\n\n      if (Path.__workingURL) {\n        return (new URL(url, base)).href;\n      }\n\n      // Fallback to creating an anchor into a disconnected document.\n      let doc = Path.__tempDoc;\n      if (!doc) {\n        doc = document.implementation.createHTMLDocument('temp');\n        Path.__tempDoc = doc;\n        doc.__base = doc.createElement('base');\n        doc.head.appendChild(doc.__base);\n        doc.__anchor = doc.createElement('a');\n      }\n      doc.__base.href = base;\n      doc.__anchor.href = url;\n      return doc.__anchor.href || url;\n    }\n  };\n\n  /********************* Xhr processor *********************/\n  const Xhr = {\n\n    async: true,\n\n    /**\n     * @param {!string} url\n     * @param {!function(boolean, ?, string=)} callback\n     * @return {XMLHttpRequest}\n     */\n    load: function(url, callback) {\n      const request = new XMLHttpRequest();\n      request.open('GET', url, Xhr.async);\n      request.addEventListener('readystatechange', (e) => {\n        if (request.readyState === 4) {\n          // Servers redirecting an import can add a Location header to help us\n          // polyfill correctly.\n          let redirectedUrl = undefined;\n          try {\n            const locationHeader = request.getResponseHeader('Location');\n            if (locationHeader) {\n              // Relative or full path.\n              redirectedUrl = (locationHeader.substr(0, 1) === '/') ?\n                location.origin + locationHeader : locationHeader;\n            }\n          } catch (e) {\n            console.error(e.message);\n          }\n          const isOk = ((request.status >= 200 && request.status < 300) ||\n            request.status === 304 || request.status === 0);\n          const resource = (request.response || request.responseText);\n          callback(!isOk, resource, redirectedUrl);\n        }\n      });\n      request.send();\n      return request;\n    }\n  };\n\n  /********************* loader *********************/\n  // This loader supports a dynamic list of urls\n  // and an oncomplete callback that is called when the loader is done.\n  class Loader {\n    constructor(onLoad, onComplete) {\n      this.cache = {};\n      this.onload = onLoad;\n      this.oncomplete = onComplete;\n      this.inflight = 0;\n      this.pending = {};\n    }\n\n    /**\n     * @param {!NodeList<!Element>} nodes\n     */\n    addNodes(nodes) {\n      const count = nodes.length;\n      if (!count) {\n        return;\n      }\n      this.inflight += count;\n      for (let i = 0; i < count; i++) {\n        this.require(nodes[i]);\n      }\n      this.checkDone();\n    }\n\n    /**\n     * @param {!Element} node\n     */\n    addNode(node) {\n      // number of transactions to complete\n      this.inflight++;\n      // commence transactions\n      this.require(node);\n      // anything to do?\n      this.checkDone();\n    }\n\n    /**\n     * @param {!Element} elt\n     */\n    require(elt) {\n      const url = elt.href || elt.src;\n      // deduplication\n      if (!this.dedupe(url, elt)) {\n        // fetch this resource\n        this.fetch(url, elt);\n      }\n    }\n\n    /**\n     * @param {string} url\n     * @param {!Element} elt\n     * @return {boolean}\n     */\n    dedupe(url, elt) {\n      if (this.pending[url]) {\n        // add to list of nodes waiting for inUrl\n        this.pending[url].push(elt);\n        // don't need fetch\n        return true;\n      }\n      let resource;\n      if (this.cache[url]) {\n        this.onload(url, elt, this.cache[url]);\n        // finished this transaction\n        this.tail();\n        // don't need fetch\n        return true;\n      }\n      // first node waiting for inUrl\n      this.pending[url] = [elt];\n      // need fetch (not a dupe)\n      return false;\n    }\n\n    /**\n     * @param {string} url\n     * @param {!Element} elt\n     */\n    fetch(url, elt) {\n      if (!url) {\n        this.receive(url, elt, true, 'error: href must be specified');\n      } else if (url.match(/^data:/)) {\n        // Handle Data URI Scheme\n        const pieces = url.split(',');\n        const header = pieces[0];\n        let body = pieces[1];\n        if (header.indexOf(';base64') > -1) {\n          body = atob(body);\n        } else {\n          body = decodeURIComponent(body);\n        }\n        this.receive(url, elt, false, body);\n      } else {\n        Xhr.load(url, (error, resource, redirectedUrl) =>\n          this.receive(url, elt, error, resource, redirectedUrl));\n      }\n    }\n\n    /**\n     * @param {!string} url\n     * @param {!Element} elt\n     * @param {boolean} err\n     * @param {string=} resource\n     * @param {string=} redirectedUrl\n     */\n    receive(url, elt, err, resource, redirectedUrl) {\n      this.cache[url] = resource;\n      const $p = this.pending[url];\n      for (let i = 0, l = $p.length, p;\n        (i < l) && (p = $p[i]); i++) {\n        // If url was redirected, use the redirected location so paths are\n        // calculated relative to that.\n        this.onload(url, p, resource, err, redirectedUrl);\n        this.tail();\n      }\n      this.pending[url] = null;\n    }\n\n    tail() {\n      --this.inflight;\n      this.checkDone();\n    }\n\n    checkDone() {\n      if (!this.inflight) {\n        this.oncomplete();\n      }\n    }\n  }\n\n  /********************* importer *********************/\n\n  const isIE = /Trident/.test(navigator.userAgent) ||\n    /Edge\\/\\d./i.test(navigator.userAgent);\n\n  // Used to disable loading of resources.\n  const importDisableType = 'import-disable';\n\n  const disabledLinkSelector = `link[rel=stylesheet][href][type=${importDisableType}]`;\n\n  const importsSelector = `\n    ${IMPORT_SELECTOR},\n    ${disabledLinkSelector},\n    style:not([type]),\n    link[rel=stylesheet][href]:not([type]),\n    script:not([type]),\n    script[type=\"application/javascript\"],\n    script[type=\"text/javascript\"]`;\n\n  const importDependencyAttr = 'import-dependency';\n\n  const rootImportsSelector = `${IMPORT_SELECTOR}:not(${importDependencyAttr})`;\n\n  const pendingScriptsSelector = `script[${importDependencyAttr}]`;\n\n  const pendingStylesSelector = `style[${importDependencyAttr}],\n    link[rel=stylesheet][${importDependencyAttr}]`;\n\n  /**\n   * @type {Function}\n   */\n  const MATCHES = Element.prototype.matches ||\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\n  /**\n   * Importer will:\n   * - load any linked import documents (with deduping)\n   * - whenever an import is loaded, prompt the parser to try to parse\n   * - observe imported documents for new elements (these are handled via the\n   *   dynamic importer)\n   */\n  class Importer {\n    constructor() {\n      this.documents = {};\n      // Observe only document head\n      new MutationObserver(this._onMutation.bind(this)).observe(document.head, {\n        childList: true\n      });\n      this._loader = new Loader(\n        this._onLoaded.bind(this), this._onLoadedAll.bind(this)\n      );\n      whenDocumentReady(() => this._loadSubtree(document));\n    }\n\n    /**\n     * @param {!(HTMLDocument|DocumentFragment)} doc\n     */\n    _loadSubtree(doc) {\n      const nodes = doc.querySelectorAll(IMPORT_SELECTOR);\n      this._loader.addNodes(nodes);\n    }\n\n    _onLoaded(url, elt, resource, err, redirectedUrl) {\n      // We've already seen a document at this url, return.\n      if (this.documents[url] !== undefined) {\n        return;\n      }\n      if (err) {\n        this.documents[url] = null;\n      } else {\n        // Generate a document from data.\n        const doc = this._makeDocument(resource, redirectedUrl || url);\n        this.documents[url] = doc;\n        this._loadSubtree(doc);\n      }\n    }\n\n    /**\n     * Creates a new document containing resource and normalizes urls accordingly.\n     * @param {string=} resource\n     * @param {string=} url\n     * @return {!DocumentFragment}\n     */\n    _makeDocument(resource, url) {\n      if (!resource) {\n        return document.createDocumentFragment();\n      }\n\n      if (isIE) {\n        // <link rel=stylesheet> should be appended to <head>. Not doing so\n        // in IE/Edge breaks the cascading order. We disable the loading by\n        // setting the type before setting innerHTML to avoid loading\n        // resources twice.\n        resource = resource.replace(STYLESHEET_REGEXP, (match, p1, p2) => {\n          if (match.indexOf('type=') === -1) {\n            return `${p1} type=${importDisableType} ${p2}`;\n          }\n          return match;\n        });\n      }\n\n      let content;\n      const template = /** @type {!HTMLTemplateElement} */\n        (document.createElement('template'));\n      template.innerHTML = resource;\n      if (template.content) {\n        // This creates issues in Safari10 when used with shadydom (see #12).\n        content = template.content;\n      } else {\n        // <template> not supported, create fragment and move children into it.\n        content = document.createDocumentFragment();\n        while (template.firstElementChild) {\n          content.appendChild(template.firstElementChild);\n        }\n      }\n\n      // Support <base> in imported docs. Resolve url and remove it from the parent.\n      const baseEl = content.querySelector('base');\n      if (baseEl) {\n        url = Path.replaceAttrUrl(baseEl.getAttribute('href'), url);\n        baseEl.parentNode.removeChild(baseEl);\n      }\n\n      // This is specific to users of <dom-module> (Polymer).\n      // TODO(valdrin) remove this when Polymer uses importForElement.\n      const s$ = content.querySelectorAll('dom-module');\n      for (let i = 0, s; i < s$.length && (s = s$[i]); i++) {\n        s.setAttribute('assetpath',\n          Path.replaceAttrUrl(s.getAttribute('assetpath') || '', url));\n      }\n\n      const n$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)>} */\n        (content.querySelectorAll(importsSelector));\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\n        // Listen for load/error events, then fix urls.\n        whenElementLoaded(n);\n        Path.fixUrls(n, url);\n        // Mark for easier selectors.\n        n.setAttribute(importDependencyAttr, '');\n      }\n      Path.fixUrlsInTemplates(content, url);\n      return content;\n    }\n\n    _onLoadedAll() {\n      this._flatten(document);\n      // We wait for styles to load, and at the same time we execute the scripts,\n      // then fire the load/error events for imports to have faster whenReady\n      // callback execution.\n      // NOTE: This is different for native behavior where scripts would be\n      // executed after the styles before them are loaded.\n      // To achieve that, we could select pending styles and scripts in the\n      // document and execute them sequentially in their dom order.\n      Promise.all([this._waitForStyles(), this._runScripts()])\n        .then(() => this._fireEvents());\n    }\n\n    /**\n     * @param {!HTMLDocument} doc\n     */\n    _flatten(doc) {\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\n        (doc.querySelectorAll(IMPORT_SELECTOR));\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\n        let imp = this.documents[n.href];\n        n.import = /** @type {!Document} */ (imp);\n        if (imp && imp.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          this.documents[n.href] = n;\n          // Suppress Closure warning about incompatible subtype assignment.\n          /** @type {!HTMLElement} */\n          (n).import = n;\n          this._flatten(imp);\n          n.appendChild(imp);\n          // If in the main document, observe for any imports added later.\n          if (doc === document) {\n            this._observe(n);\n          }\n        }\n      }\n    }\n\n    /**\n     * Replaces all the imported scripts with a clone in order to execute them.\n     * Updates the `currentScript`.\n     * @return {Promise} Resolved when scripts are loaded.\n     */\n    _runScripts() {\n      const s$ = document.querySelectorAll(pendingScriptsSelector);\n      let promise = Promise.resolve();\n      for (let i = 0, l = s$.length, s; i < l && (s = s$[i]); i++) {\n        promise = promise.then(() => {\n          // The pending scripts have been generated through innerHTML and\n          // browsers won't execute them for security reasons. We cannot use\n          // s.cloneNode(true) either, the only way to run the script is manually\n          // creating a new element and copying its attributes/textContent.\n          const clone = /** @type {!HTMLScriptElement} */\n            (document.createElement('script'));\n          // Remove import-dependency attribute to avoid double cloning.\n          s.removeAttribute(importDependencyAttr);\n          // Copy attributes and textContent.\n          for (let j = 0, ll = s.attributes.length; j < ll; j++) {\n            clone.setAttribute(s.attributes[j].name, s.attributes[j].value);\n          }\n          clone.textContent = s.textContent;\n\n          // Update currentScript and replace original with clone script.\n          currentScript = clone;\n          s.parentNode.replaceChild(clone, s);\n          // Wait for load/error events; after is loaded, reset currentScript.\n          return whenElementLoaded(clone).then(() => currentScript = null);\n        });\n      }\n      return promise;\n    }\n\n    /**\n     * Waits for all the imported stylesheets/styles to be loaded.\n     * @return {Promise}\n     */\n    _waitForStyles() {\n      // <link rel=stylesheet> should be appended to <head>. Not doing so\n      // in IE/Edge breaks the cascading order\n      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10472273/\n      // If there is one <link rel=stylesheet> imported, we must move all imported\n      // links and styles to <head>.\n      const needsMove = !!document.querySelector(disabledLinkSelector);\n      const s$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLStyleElement)>} */\n        (document.querySelectorAll(pendingStylesSelector));\n      const promises = [];\n      for (let i = 0, l = s$.length, s; i < l && (s = s$[i]); i++) {\n        // Listen for load/error events, remove selector once is done loading.\n        promises.push(whenElementLoaded(s)\n          .then(() => s.removeAttribute(importDependencyAttr)));\n        // Check if was already moved to head, to handle the case where the element\n        // has already been moved but it is still loading.\n        if (needsMove && s.parentNode !== document.head) {\n          let rootImport = importForElement(s);\n          while (rootImport && importForElement(rootImport)) {\n            rootImport = importForElement(rootImport);\n          }\n          // Replace the element we're about to move with a placeholder.\n          // NOTE: we first have to append the element to the new parent, then\n          // we can put the placeholder at its place, otherwise load/error events\n          // seem to be fired too early.\n          const parent = s.parentNode,\n            next = s.nextSibling,\n            placeholder = document.createElement(s.localName);\n          // Add reference of the moved element.\n          placeholder['__appliedElement'] = s;\n          // First, re-parent the element...\n          if (rootImport.parentNode === document.head) {\n            document.head.insertBefore(s, rootImport);\n          } else {\n            document.head.appendChild(s);\n          }\n          // ...and then, insert the placeholder at the right place.\n          parent.insertBefore(placeholder, next);\n          // Enable the loading of <link rel=stylesheet>.\n          s.removeAttribute('type');\n        }\n      }\n      return Promise.all(promises);\n    }\n\n    /**\n     * Fires load/error events for loaded imports.\n     */\n    _fireEvents() {\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\n        (document.querySelectorAll(IMPORT_SELECTOR));\n      // Inverse order to have events firing bottom-up.\n      for (let i = n$.length - 1, n; i >= 0 && (n = n$[i]); i--) {\n        // Don't fire twice same event.\n        if (!n['__loaded']) {\n          n['__loaded'] = true;\n          const eventType = n.import ? 'load' : 'error';\n          n.dispatchEvent(new CustomEvent(eventType, {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined\n          }));\n        }\n      }\n    }\n\n    _observe(element) {\n      if (element['__importObserver']) {\n        return;\n      }\n      element['__importObserver'] = new MutationObserver(this._onMutation.bind(this));\n      element['__importObserver'].observe(element, {\n        childList: true,\n        subtree: true\n      });\n    }\n\n    /**\n     * @param {Array<MutationRecord>} mutations\n     */\n    _onMutation(mutations) {\n      for (let j = 0, m; j < mutations.length && (m = mutations[j]); j++) {\n        for (let i = 0, l = m.addedNodes ? m.addedNodes.length : 0; i < l; i++) {\n          const n = /** @type {HTMLLinkElement} */ (m.addedNodes[i]);\n          // NOTE: added scripts are not updating currentScript in IE.\n          // TODO add test w/ script & stylesheet maybe\n          if (n && isImportLink(n)) {\n            this._loader.addNode(n);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  function isImportLink(node) {\n    return node.nodeType === Node.ELEMENT_NODE && MATCHES.call(node, IMPORT_SELECTOR);\n  }\n\n  /**\n   * Waits for an element to finish loading. If already done loading, it will\n   * mark the element accordingly.\n   * @param {!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)} element\n   * @return {Promise}\n   */\n  function whenElementLoaded(element) {\n    if (!element['__loadPromise']) {\n      element['__loadPromise'] = new Promise((resolve) => {\n        if (isElementLoaded(element)) {\n          resolve();\n        } else if (isIE && element.localName === 'style') {\n          // NOTE: We listen only for load events in IE/Edge, because in IE/Edge\n          // <style> with @import will fire error events for each failing @import,\n          // and finally will trigger the load event when all @import are\n          // finished (even if all fail).\n          element.addEventListener('load', resolve);\n        } else {\n          element.addEventListener('load', resolve);\n          element.addEventListener('error', resolve);\n        }\n      }).then(() => {\n        element['__loaded'] = true;\n        return element;\n      });\n    }\n    return element['__loadPromise'];\n  }\n\n  /**\n   * @param {!HTMLElement} el\n   * @return {boolean}\n   */\n  function isElementLoaded(el) {\n    el['__loaded'] = el['__loaded'] ||\n      // Inline scripts don't trigger load/error events, consider them already loaded.\n      (el.localName === 'script' && !( /** @type {!HTMLScriptElement} */ (el).src));\n    return el['__loaded'];\n  }\n\n  /**\n   * Calls the callback when all imports in the document at call time\n   * (or at least document ready) have loaded. Callback is called synchronously\n   * if imports are already done loading.\n   * @param {function()=} callback\n   */\n  function whenReady(callback) {\n    // 1. ensure the document is in a ready state (has dom), then\n    // 2. watch for loading of imports and call callback when done\n    whenDocumentReady(() => whenImportsReady(() => callback && callback()));\n  }\n\n  /**\n   * Invokes the callback when document is in ready state. Callback is called\n   *  synchronously if document is already done loading.\n   * @param {!function()} callback\n   */\n  function whenDocumentReady(callback) {\n    if (document.readyState !== 'loading') {\n      callback();\n    } else {\n      document.addEventListener('readystatechange', function stateChanged() {\n        if (document.readyState !== 'loading') {\n          document.removeEventListener('readystatechange', stateChanged);\n          callback();\n        }\n      });\n    }\n  }\n\n  /**\n   * Invokes the callback after all imports are loaded. Callback is called\n   * synchronously if imports are already done loading.\n   * @param {!function()} callback\n   */\n  function whenImportsReady(callback) {\n    let imports = /** @type {!NodeList<!HTMLLinkElement>} */\n      (document.querySelectorAll(rootImportsSelector));\n    const promises = [];\n    for (let i = 0, l = imports.length, imp; i < l && (imp = imports[i]); i++) {\n      if (!isElementLoaded(imp)) {\n        promises.push(whenElementLoaded(imp));\n      }\n    }\n    if (promises.length) {\n      Promise.all(promises).then(() => callback());\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Returns the link that imported the element.\n   * @param {!Element} element\n   * @return {!HTMLLinkElement|undefined}\n   */\n  function importForElement(element) {\n    let target = element;\n    while ((target = target['__ownerImport'] || target.parentNode || target.host)) {\n      // Found the deepest import.\n      if (isImportLink(target)) {\n        element['__ownerImport'] = /** @type {!HTMLLinkElement} */ (target);\n        break;\n      }\n    }\n    return element['__ownerImport'];\n  }\n\n  /**\n    Add support for the `HTMLImportsLoaded` event and the `HTMLImports.whenReady`\n    method. This api is necessary because unlike the native implementation,\n    script elements do not force imports to resolve. Instead, users should wrap\n    code in either an `HTMLImportsLoaded` handler or after load time in an\n    `HTMLImports.whenReady(callback)` call.\n\n    NOTE: This module also supports these apis under the native implementation.\n    Therefore, if this file is loaded, the same code can be used under both\n    the polyfill and native implementation.\n   */\n  whenReady(() => document.dispatchEvent(new CustomEvent('HTMLImportsLoaded', {\n    cancelable: true,\n    bubbles: true,\n    detail: undefined\n  })));\n\n  if (useNative) {\n    // Listen for load/error events to capture dynamically added scripts.\n    /**\n     * @type {!function(!Event)}\n     */\n    const onLoadingDone = (event) => {\n      const elem = /** @type {!Element} */ (event.target);\n      if (isImportLink(elem)) {\n        elem['__loaded'] = true;\n      }\n    };\n    document.addEventListener('load', onLoadingDone, true /* useCapture */ );\n    document.addEventListener('error', onLoadingDone, true /* useCapture */ );\n  } else {\n    new Importer();\n  }\n\n  // exports\n  scope.useNative = useNative;\n  scope.whenReady = whenReady;\n  scope.importForElement = importForElement;\n\n})(window.HTMLImports = (window.HTMLImports || {}));\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport * as StyleUtil from './style-util'\nimport {nativeShadow} from './style-settings'\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  // Given a node and scope name, add a scoping class to each node\n  // in the tree. This facilitates transforming css into scoped rules.\n  dom(node, scope, shouldRemoveScope) {\n    // one time optimization to skip scoping...\n    if (node.__styleScoped) {\n      node.__styleScoped = null;\n    } else {\n      this._transformDom(node, scope || '', shouldRemoveScope);\n    }\n  }\n\n  _transformDom(node, selector, shouldRemoveScope) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      this.element(node, selector, shouldRemoveScope);\n    }\n    let c$ = (node.localName === 'template') ?\n      (node.content || node._content).childNodes :\n      node.children || node.childNodes;\n    if (c$) {\n      for (let i=0; i<c$.length; i++) {\n        this._transformDom(c$[i], selector, shouldRemoveScope);\n      }\n    }\n  }\n\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            StyleUtil.setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          StyleUtil.setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  elementStyles(element, styleRules, callback) {\n    let cssBuildType = element.__cssBuild;\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    let cssText = (nativeShadow || cssBuildType === 'shady') ?\n    StyleUtil.toCssText(styleRules, callback) :\n    this.css(styleRules, element.is, element.extends, callback) + '\\n\\n';\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return StyleUtil.toCssText(rules, function(rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? '[is=' +  scope + ']' : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  // transforms a css rule to a scoped rule.\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule.selector = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = rule.selector.split(COMPLEX_SELECTOR_SEP);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!StyleUtil.isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.join(COMPLEX_SELECTOR_SEP);\n  }\n\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`);\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir) =>\n      `[dir=\"${dir}\"] ${before}, ${before}[dir=\"${dir}\"]`);\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    let p$ = selector.split(PSEUDO_PREFIX);\n    p$[0] += scope;\n    return p$.join(PSEUDO_PREFIX);\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule.selector = rule.parsedSelector;\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  normalizeRootSelector(rule) {\n    if (rule.selector === ROOT) {\n      rule.selector = 'html';\n    }\n  }\n\n  _transformDocumentSelector(selector) {\n    return selector.match(SLOTTED) ?\n      this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR) :\n      this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n  }\n}\n\nlet NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nlet SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nlet COMPLEX_SELECTOR_SEP = ',';\nlet SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g;\nlet SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nlet HOST = ':host';\nlet ROOT = ':root';\nlet SLOTTED = '::slotted';\nlet SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nlet HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nlet SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nlet DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)/;\nlet CSS_CLASS_PREFIX = '.';\nlet PSEUDO_PREFIX = ':';\nlet CLASS = 'class';\nlet SELECTOR_NO_MATCH = 'should_not_match';\n\nexport default new StyleTransformer()","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport default {};\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport templateMap from './template-map'\n\nconst promise = Promise.resolve();\n\nexport default class StyleInfo {\n  static get(node) {\n    return node.__styleInfo;\n  }\n  static set(node, styleInfo) {\n    node.__styleInfo = styleInfo;\n    return styleInfo;\n  }\n  static invalidate(elementName) {\n    if (templateMap[elementName]) {\n      templateMap[elementName]._applyShimInvalid = true;\n    }\n  }\n  /*\n  the template is marked as `validating` for one microtask so that all instances\n  found in the tree crawl of `applyStyle` will update themselves,\n  but the template will only be updated once.\n  */\n  static startValidating(elementName) {\n    const template = templateMap[elementName];\n    if (!template._validating) {\n      template._validating = true;\n      promise.then(() => {\n        template._applyShimInvalid = false;\n        template._validating = false;\n      });\n    }\n  }\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    this.styleRules = ast || null;\n    this.placeholder = placeholder || null;\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    this.overrideStyleProperties = null;\n    this.elementName = elementName || '';\n    this.cssBuild = cssBuild || '';\n    this.typeExtension = typeExtension || '';\n    this.styleProperties = null;\n    this.scopeSelector = null;\n    this.customStyle = null;\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {applyStylePlaceHolder} from './style-util'\nimport {nativeShadow} from './style-settings'\n\nlet placeholderMap = {};\n\nconst ce = window.customElements;\nif (ce && !nativeShadow) {\n  const origDefine = ce.define;\n  ce.define = function(name, clazz, options) {\n    placeholderMap[name] = applyStylePlaceHolder(name);\n    return origDefine.call(ce, name, clazz, options);\n  };\n}\n\nexport default placeholderMap;\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    @apply --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\nimport {rx, forEachRule, processVariableAndFallback, rulesForStyle} from './style-util'\nimport templateMap from './template-map'\nimport StyleInfo from './style-info'\n\nlet MIXIN_MATCH = rx.MIXIN_MATCH;\nlet VAR_ASSIGN = rx.VAR_ASSIGN;\n\nlet APPLY_NAME_CLEAN = /;\\s*/m;\nlet INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nlet MIXIN_VAR_SEP = '_-_';\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    this._map = {};\n  }\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    }\n  }\n  get(name) {\n    name = name.trim();\n    return this._map[name];\n  }\n}\n\nclass ApplyShim {\n  constructor() {\n    this._currentTemplate = null;\n    this._measureElement = null;\n    this._map = new MixinMap();\n    this._separator = MIXIN_VAR_SEP;\n    this._boundProduceCssProperties = (\n      matchText, propertyName, valueProperty, valueMixin) =>\n        this._produceCssProperties(\n          matchText, propertyName, valueProperty, valueMixin);\n  }\n  // return true if `cssText` contains a mixin definition or consumption\n  detectMixin(cssText) {\n    const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n    // reset state of the regexes\n    MIXIN_MATCH.lastIndex = 0;\n    VAR_ASSIGN.lastIndex = 0;\n    return has;\n  }\n  transformStyle(style, elementName) {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    return ast;\n  }\n  transformRules(rules, elementName) {\n    this._currentTemplate = templateMap[elementName];\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentTemplate = null;\n  }\n  transformRule(rule) {\n    rule.cssText = this.transformCssText(rule.parsedCssText);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule.selector === ':root') {\n      rule.selector = ':host > *';\n    }\n  }\n  transformCssText(cssText) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, this._boundProduceCssProperties);\n    // consume mixins\n    return this._consumeCssProperties(cssText);\n  }\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = document.createElement('meta');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  // replace mixin consumption with variable consumption\n  _consumeCssProperties(text) {\n    let m;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = this._cssTextToMap(textBeforeApply);\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = [textBeforeApply, replacement, textAfterApply].join('');\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  // produce variable consumption at the site of mixin consumption\n  // @apply --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n  // Example:\n  // border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentTemplate) {\n        mixinEntry.dependants[this._currentTemplate.name] = this._currentTemplate;\n      }\n      let p, parts, f;\n      for (p in mixinEntry.properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f);\n        }\n        parts.push(')');\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = ApplyShim._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  // \"parse\" a mixin definition into a map of properties and values\n  // cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n  _cssTextToMap(text) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  _invalidateMixinEntry(mixinEntry) {\n    for (let elementName in mixinEntry.dependants) {\n      if (!this._currentTemplate || elementName !== this._currentTemplate.name) {\n        StyleInfo.invalidate(elementName);\n      }\n    }\n  }\n\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = '@apply ' + value + ';';\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties(valueMixin);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    let mixinValues = this._cssTextToMap(mixinAsProperties);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(propertyName + MIXIN_VAR_SEP + p + ': ' + v);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = matchText + ';' + prefix;\n    }\n    return prefix + out.join('; ') + ';';\n  }\n}\n\nlet applyShim = new ApplyShim();\nwindow['ApplyShim'] = applyShim;\nexport default applyShim;\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow} from './style-settings'\nimport StyleTransformer from './style-transformer'\n\nexport let flush = function() {};\n\nif (!nativeShadow) {\n  let elementNeedsScoping = (element) => {\n    return (element.classList &&\n      !element.classList.contains(StyleTransformer.SCOPE_NAME) ||\n      // note: necessary for IE11\n      (element instanceof SVGElement && (!element.hasAttribute('class') ||\n      element.getAttribute('class').indexOf(StyleTransformer.SCOPE_NAME) < 0)));\n  }\n\n  let handler = (mxns) => {\n    for (let x=0; x < mxns.length; x++) {\n      let mxn = mxns[x];\n      if (mxn.target === document.documentElement ||\n        mxn.target === document.head) {\n        continue;\n      }\n      for (let i=0; i < mxn.addedNodes.length; i++) {\n        let n = mxn.addedNodes[i];\n        if (elementNeedsScoping(n)) {\n          let root = n.getRootNode();\n          if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // may no longer be in a shadowroot\n            let host = root.host;\n            if (host) {\n              let scope = host.is || host.localName;\n              StyleTransformer.dom(n, scope);\n            }\n          }\n        }\n      }\n      for (let i=0; i < mxn.removedNodes.length; i++) {\n        let n = mxn.removedNodes[i];\n        if (n.nodeType === Node.ELEMENT_NODE) {\n          let classes = undefined;\n          if (n.classList) {\n            classes = Array.from(n.classList);\n          } else if (n.hasAttribute('class')) {\n            classes = n.getAttribute('class').split(/\\s+/);\n          }\n          if (classes !== undefined) {\n            // NOTE: relies on the scoping class always being adjacent to the\n            // SCOPE_NAME class.\n            let classIdx = classes.indexOf(StyleTransformer.SCOPE_NAME);\n            if (classIdx >= 0) {\n              let scope = classes[classIdx + 1];\n              if (scope) {\n                StyleTransformer.dom(n, scope, true);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  }\n  let nativeCustomElements = (window.customElements &&\n    !window.customElements.flush);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    }\n    // use polyfill timing if it's available\n    if (window.HTMLImports) {\n      window.HTMLImports.whenReady(delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          }\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {parse} from './css-parse'\nimport {nativeShadow, nativeCssVariables, nativeCssApply} from './style-settings'\nimport StyleTransformer from './style-transformer'\nimport * as StyleUtil from './style-util'\nimport StyleProperties from './style-properties'\nimport templateMap from './template-map'\nimport placeholderMap from './style-placeholder'\nimport StyleInfo from './style-info'\nimport StyleCache from './style-cache'\n\n// TODO(dfreedm): consider spliting into separate global\nimport ApplyShim from './apply-shim'\nimport {flush as watcherFlush} from './document-watcher'\n\nlet styleCache = new StyleCache();\n\nclass ShadyCSS {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = document.documentElement;\n    this._documentOwnerStyleInfo = StyleInfo.set(document.documentElement, new StyleInfo({rules: []}));\n    this._elementsHaveApplied = false;\n  }\n  get nativeShadow() {\n    return nativeShadow;\n  }\n  get nativeCss() {\n    return nativeCssVariables;\n  }\n  get nativeCssApply() {\n    return nativeCssApply;\n  }\n  flush() {\n    watcherFlush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return StyleUtil.rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return StyleUtil.toCssText(ast);\n  }\n  _gatherStyles(template) {\n    let styles = template.content.querySelectorAll('style');\n    let cssText = [];\n    for (let i = 0; i < styles.length; i++) {\n      let s = styles[i];\n      cssText.push(s.textContent);\n      s.parentNode.removeChild(s);\n    }\n    return cssText.join('').trim();\n  }\n  _getCssBuild(template) {\n    let style = template.content.querySelector('style');\n    if (!style) {\n      return '';\n    }\n    return style.getAttribute('css-build') || '';\n  }\n  prepareTemplate(template, elementName, typeExtension) {\n    if (template._prepared) {\n      return;\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = this._getCssBuild(template);\n    let cssText = this._gatherStyles(template);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n      __cssBuild: cssBuild,\n    };\n    if (!this.nativeShadow) {\n      StyleTransformer.dom(template.content, elementName);\n    }\n    // check if the styling has mixin definitions or uses\n    let hasMixins = ApplyShim.detectMixin(cssText);\n    let ast = parse(cssText);\n    // only run the applyshim transforms if there is a mixin involved\n    if (hasMixins && this.nativeCss && !this.nativeCssApply) {\n      ApplyShim.transformRules(ast, elementName);\n    }\n    template._styleAst = ast;\n\n    let ownPropertyNames = [];\n    if (!this.nativeCss) {\n      ownPropertyNames = StyleProperties.decorateStyles(template._styleAst, info);\n    }\n    if (!ownPropertyNames.length || this.nativeCss) {\n      let root = this.nativeShadow ? template.content : null;\n      let placeholder = placeholderMap[elementName];\n      let style = this._generateStaticStyle(info, template._styleAst, root, placeholder);\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n  _generateStaticStyle(info, rules, shadowroot, placeholder) {\n    let cssText = StyleTransformer.elementStyles(info, rules);\n    if (cssText.length) {\n      return StyleUtil.applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n  }\n  _prepareHost(host) {\n    let is = host.getAttribute('is') || host.localName;\n    let typeExtension;\n    if (is !== host.localName) {\n      typeExtension = host.localName;\n    }\n    let placeholder = placeholderMap[is];\n    let template = templateMap[is];\n    let ast;\n    let ownStylePropertyNames;\n    let cssBuild;\n    if (template) {\n      ast = template._styleAst;\n      ownStylePropertyNames = template._ownPropertyNames;\n      cssBuild = template._cssBuild;\n    }\n    return StyleInfo.set(host,\n      new StyleInfo(\n        ast,\n        placeholder,\n        ownStylePropertyNames,\n        is,\n        typeExtension,\n        cssBuild\n      )\n    );\n  }\n  applyStyle(host, overrideProps) {\n    let is = host.getAttribute('is') || host.localName;\n    let styleInfo = StyleInfo.get(host);\n    let hasApplied = Boolean(styleInfo);\n    if (!styleInfo) {\n      styleInfo = this._prepareHost(host);\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (window.CustomStyle) {\n      let CS = window.CustomStyle;\n      if (CS._documentDirty) {\n        CS.findStyles();\n        if (!this.nativeCss) {\n          this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n        } else if (!this.nativeCssApply) {\n          CS._revalidateApplyShim();\n        }\n        CS.applyStyles();\n        // if no elements have booted yet, we can just update the document and be done\n        if (!this._elementsHaveApplied) {\n          return;\n        }\n        // if no native css custom properties, we must recalculate the whole tree\n        if (!this.nativeCss) {\n          this.updateStyles();\n          /*\n          When updateStyles() runs, this element may not have a shadowroot yet.\n          If not, we need to make sure that this element runs `applyStyle` on itself at least once to generate a style\n          */\n          if (hasApplied) {\n            return;\n          }\n        }\n      }\n    }\n    if (overrideProps) {\n      styleInfo.overrideStyleProperties =\n        styleInfo.overrideStyleProperties || {};\n      Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n    }\n    if (this.nativeCss) {\n      if (styleInfo.overrideStyleProperties) {\n        this._updateNativeProperties(host, styleInfo.overrideStyleProperties);\n      }\n      let template = templateMap[is];\n      // bail early if there is no shadowroot for this element\n      if (!template && !this._isRootOwner(host)) {\n        return;\n      }\n      if (template && template._applyShimInvalid && template._style) {\n        // update template\n        if (!template._validating) {\n          ApplyShim.transformRules(template._styleAst, is);\n          template._style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          StyleInfo.startValidating(is);\n        }\n        // update instance if native shadowdom\n        if (this.nativeShadow) {\n          let root = host.shadowRoot;\n          if (root) {\n            let style = root.querySelector('style');\n            style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n        styleInfo.styleRules = template._styleAst;\n      }\n    } else {\n      this._updateProperties(host, styleInfo);\n      if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n        this._applyStyleProperties(host, styleInfo);\n      }\n    }\n    if (hasApplied) {\n      let root = this._isRootOwner(host) ? host : host.shadowRoot;\n      // note: some elements may not have a root!\n      if (root) {\n        this._applyToDescendants(root);\n      }\n    }\n  }\n  _applyToDescendants(root) {\n    let c$ = root.children;\n    for (let i = 0, c; i < c$.length; i++) {\n      c = c$[i];\n      if (c.shadowRoot) {\n        this.applyStyle(c);\n      }\n      this._applyToDescendants(c);\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = node.getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = host.getAttribute('is') || host.localName;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!this.nativeShadow) {\n      StyleProperties.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties.hostAndRootPropertiesForScope(host, styleInfo.styleRules);\n    let propertyData = StyleProperties.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  _updateNativeProperties(element, properties) {\n    // remove previous properties\n    for (let p in properties) {\n      // NOTE: for bc with shim, don't apply null values.\n      if (p === null) {\n        element.style.removeProperty(p);\n      } else {\n        element.style.setProperty(p, properties[p]);\n      }\n    }\n  }\n  updateStyles(properties) {\n    this.applyStyle(this._documentOwner, properties);\n  }\n  /* Custom Style operations */\n  _transformCustomStyleForDocument(style) {\n    let ast = StyleUtil.rulesForStyle(style);\n    StyleUtil.forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer.documentRule(rule);\n      }\n      if (this.nativeCss && !this.nativeCssApply) {\n        ApplyShim.transformRule(rule);\n      }\n    });\n    if (this.nativeCss) {\n      style.textContent = StyleUtil.toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules.rules.push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (this.nativeCss && !this.nativeCssApply) {\n      let ast = StyleUtil.rulesForStyle(style);\n      ApplyShim.transformRules(ast);\n      style.textContent = StyleUtil.toCssText(ast);\n    }\n  }\n  _applyCustomStyleToDocument(style) {\n    if (!this.nativeCss) {\n      StyleProperties.applyCustomStyle(style, this._documentOwnerStyleInfo.styleProperties);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!this.nativeCss) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value.trim();\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = element.getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer.SCOPE_NAME, scopeName);\n    }\n    if (!this.nativeCss) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    StyleUtil.setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n}\n\nwindow['ShadyCSS'] = new ShadyCSS();","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nexport default class StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n(function(scope) {\n\n  'use strict';\n\n  HTMLImports.whenReady(function() {\n    requestAnimationFrame(function() {\n      window.dispatchEvent(new CustomEvent('WebComponentsReady'));\n    });\n  });\n\n})(window.WebComponents);\n","/**\n * @license\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n(function(scope) {\n\n  // It's desireable to provide a default stylesheet\n  // that's convenient for styling unresolved elements, but\n  // it's cumbersome to have to include this manually in every page.\n  // It would make sense to put inside some HTMLImport but\n  // the HTMLImports polyfill does not allow loading of stylesheets\n  // that block rendering. Therefore this injection is tolerated here.\n  //\n  // NOTE: position: relative fixes IE's failure to inherit opacity\n  // when a child is not statically positioned.\n  var style = document.createElement('style');\n  style.textContent = ''\n      + 'body {'\n      + 'transition: opacity ease-in 0.2s;'\n      + ' } \\n'\n      + 'body[unresolved] {'\n      + 'opacity: 0; display: block; overflow: hidden; position: relative;'\n      + ' } \\n'\n      ;\n  var head = document.querySelector('head');\n  head.insertBefore(style, head.firstChild);\n\n})(window.WebComponents);\n"]}