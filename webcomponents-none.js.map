{"version":3,"sources":["webcomponents-none-index.js","bower_components/shadycss/src/css-parse.js","bower_components/shadycss/src/style-settings.js","bower_components/shadycss/src/style-util.js","bower_components/shadycss/src/style-properties.js","bower_components/shadycss/src/apply-shim-utils.js","bower_components/shadycss/src/document-wait.js","bower_components/shadycss/src/common-utils.js","bower_components/shadycss/src/common-regex.js","bower_components/shadycss/src/style-transformer.js","bower_components/shadycss/src/style-info.js","bower_components/shadycss/src/style-placeholder.js","bower_components/shadycss/src/document-watcher.js","bower_components/shadycss/src/template-map.js","bower_components/shadycss/src/custom-style-interface.js","bower_components/shadycss/src/scoping-shim.js","bower_components/shadycss/src/style-cache.js","bower_components/shadycss/entrypoints/scoping-shim.js"],"names":["parse","text","clean","parseCss","lex","cssText","replace","RX","comments","port","root","StyleNode","length","n","i","l","OPEN_BRACE","p","previous","push","CLOSE_BRACE","node","t","substring","trim","ss","_expandUnicodeEscapes","multipleSpaces","lastIndexOf","s","indexOf","types","MEDIA_RULE","match","keyframesRule","KEYFRAMES_RULE","split","pop","VAR_START","MIXIN_RULE","STYLE_RULE","r$","r","code","arguments","repeat","stringify","preserveProperties","_hasMixinRules","removeCustomProps","rules","removeCustomPropAssignment","removeCustomPropApply","customProp","mixinProp","mixinApply","varApply","parseSettings","settings","nativeCssVariables","nativeShadow","toCssText","callback","forEachRule","rulesForStyle","style","textContent","isKeyframesSelector","rule","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","type","matchMedia","MEDIA_MATCH","window","matches","applyCss","moniker","target","contextNode","createScopeStyle","applyStyle","document","head","after","nextSibling","firstChild","lastHeadApplyNode","insertBefore","createElement","setAttribute","applyStylePlaceHolder","placeHolder","createComment","scope","findMatchingParen","start","level","processVariableAndFallback","str","end","inner","prefix","suffix","comma","value","fallback","setElementClassRaw","element","call","getIsExtends","is","getAttribute","localName","extendz","extends","addToBitMask","bits","o","parseInt","invalidate","elementName","template","templateMap","invalidateTemplate","templateIsValid","templateIsValidating","_validating","startValidatingTemplate","promise","then","documentWait","whenReady","readyPromise","Promise","resolve","resolveFn","readyState","addEventListener","updateNativeProperties","properties","removeProperty","setProperty","constructor","navigator","userAgent","CSS","supports","ShadyCSS","VAR_ASSIGN","MIXIN_MATCH","VAR_CONSUMED","ANIMATION_MATCH","BRACKETED","SCOPE_NAME","StyleTransformer","dom","shouldRemoveScope","_transformDom","selector","nodeType","Node","ELEMENT_NODE","c$","content","_content","childNodes","children","classList","remove","add","c","newValue","StyleUtil.setElementClassRaw","elementStyles","styleRules","cssBuildType","StyleUtil.toCssText","ex","StyleUtil.getIsExtends","css","ext","hostScope","_calcHostScope","_calcElementScope","self","isScoped","_transformRule","_transformComplexSelector","transformer","transformedSelector","_transformRuleCss","p$","COMPLEX_SELECTOR_SEP","StyleUtil.isKeyframesSelector","join","stop","NTH","m","SLOTTED_START","HOST","SIMPLE_SELECTOR_SEP","info","_transformCompoundSelector","combinator","slottedIndex","SLOTTED","_transformHostSelector","_transformSimpleSelector","slotted","SLOTTED_PAREN","paren","DIR_PAREN","before","dir","PSEUDO_PREFIX","HOST_PAREN","SIMPLE_SELECTOR_PREFIX","typeSelector","host","documentRule","normalizeRootSelector","_transformDocumentSelector","SCOPE_DOC_SELECTOR","StyleTransformer$1","infoKey","StyleInfo","get","set","styleInfo","ast","placeholder","ownStylePropertyNames","typeExtension","cssBuild","overrideStyleProperties","styleProperties","scopeSelector","customStyle","_getStyleRules","prototype","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","Element","IS_IE","XSCOPE_NAME","StyleProperties","decorateStyles","props","keyframes","ruleIndex","StyleUtil.forEachRule","decorateRule","index","collectPropertiesInCssText","propertyInfo","_keyframes","names","hasProperties","collectProperties","collectCssText","any","RX.VAR_ASSIGN","exec","Object","assign","collectConsumingCssText","RX.BRACKETED","name","RX.VAR_CONSUMED","reify","getOwnPropertyNames","valueForProperty","property","valueForProperties","StyleUtil.processVariableAndFallback","propertyValue","parts","RX.MIXIN_MATCH","lastIndex","colon","pp","slice","applyProperties","output","applyKeyframeTransforms","keyframeTransforms","input","hasAnimations","RX.ANIMATION_MATCH","test","transform","keyframeNamesToTransform","keyframe","propertyDataFromStyles","selectorToMatch","key","whenHostOrRootRule","isExtends","parsedSelector","isRoot","isHost","hostAndRootPropertiesForScope","hostProps","rootProps","_element","transformStyles","hostSelector","rxHostSelector","hostRx","RegExp","RX.HOST_PREFIX","_elementKeyframeTransforms","_scopeSelector","keyframesRules","_scopeKeyframes","_keyframesRuleTransformer","keyframesNameRx","transformedKeyframesName","scopeId","applyElementScopeSelector","old","v","applyElementStyle","parentNode","removeChild","StyleUtil.applyCss","shadowRoot","StyleUtil.applyStyle","applyCustomStyle","StyleUtil.rulesForStyle","StyleProperties$1","placeholderMap","ce","origDefine","clazz","options","flush","elementNeedsScoping","contains","hasAttribute","handler","mxns","mxn","x","documentElement","addedNodes","getRootNode","DOCUMENT_FRAGMENT_NODE","removedNodes","classes","Array","from","classIdx","observer","MutationObserver","observe","childList","subtree","nativeCustomElements","customElements","delayedStart","body","requestAnimationFrame","listener","removeEventListener","takeRecords","PROCESSED_MARKER","SEEN_MARKER","transformFn","validateFn","CustomStyleInterface","enqueueDocumentValidation","addCustomStyle","getStyleForCustomStyle","findStyles","cs","appliedStyle","attr","attributes","defineProperties","fn","needsEnqueue","styleCache","typeMax","cache","_validate","cacheEntry","ownPropertyNames","pn","idx","store","tagname","styleElement","list","shift","fetch","entry","ScopingShim","_scopeCounter","_documentOwner","_documentOwnerStyleInfo","_elementsHaveApplied","_applyShim","_customStyleInterface","_ensure","watcherFlush","_generateScopeSelector","id","getStyleAst","styleAstToString","_gatherStyles","styles","querySelectorAll","_getCssBuild","querySelector","prepareTemplate","_prepared","__cssBuild","hasMixins","_styleAst","_cssBuild","_generateStaticStyle","_style","_ownPropertyNames","shadowroot","_prepareHost","_ensureApplyShim","ApplyShim","ApplyShimUtils.invalidate","_ensureCustomStyleInterface","transformCustomStyleForDocument","flushCustomStyles","customStyles","_revalidateCustomStyleApplyShim","_updateProperties","_applyCustomStyles","styleDocument","overrideProps","_isRootOwner","_applyStyleProperties","ApplyShimUtils.templateIsValid","ApplyShimUtils.templateIsValidating","ApplyShimUtils.startValidatingTemplate","_styleOwnerForNode","cachedScopeSelector","cachedStyle","oldScopeSelector","owner","ownerStyleInfo","ownerProperties","create","hostAndRootProps","propertyData","propertiesMatchingHost","_mixinOverrideStyles","overrides","styleSubtree","shadowChildren","_revalidateApplyShim","getComputedStyleValue","getComputedStyle","getPropertyValue","setElementClass","classString","scopeName","classAttr","k$","_styleInfoForNode","scopingShim","elementExtends","nativeCss"],"mappings":"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","file":"webcomponents-none.js","sourcesContent":["(function () {\n'use strict';\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length;\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nfunction stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nconst types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n};\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n};\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nlet nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n/**\n * @param {ShadyCSSOptions | ShadyCSSInterface | undefined} settings\n */\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings['nativeCss'] && !settings['shimcssproperties'];\n  nativeShadow = nativeShadow && !settings['nativeShadow'] && !settings['shimshadow'];\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window.ShadyCSS);\n} else if (window['WebComponents']) {\n  parseSettings(window['WebComponents']['flags']);\n}\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nconst VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi;\nconst MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nconst VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nconst ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nconst MEDIA_MATCH = /@media[^(]*(\\([^)]*\\))/;\n\nconst BRACKETED = /\\{[^}]*\\}/g;\nconst HOST_PREFIX = '(?:^|[^.#[:])';\nconst HOST_SUFFIX = '($|[.:[\\\\s>+~])';\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n */\nfunction toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nfunction rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'];\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nfunction isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nfunction forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nfunction applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\n/**\n * @param {Node} style\n * @param {?Node} target\n * @param {?Node} contextNode\n * @return {HTMLStyleElement}\n */\nfunction applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return /** @type {HTMLStyleElement} */(target.insertBefore(style, after));\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {Element}\n */\nfunction createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/** @type {Node} */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {Node}\n */\nfunction applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\n\n\n/**\n * @param {Element} element\n * @return {?string}\n */\n\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nfunction processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nfunction setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window['ShadyDOM']) {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\n/**\n * @param {Element|Object} element\n * @return {{is: string, extends: string}}\n */\nfunction getIsExtends(element) {\n  let is = element.is || (element.getAttribute && element.getAttribute('is')) || element.localName;\n  let extendz = element.extends || element.localName !== is ? element.localName : '';\n  return {is, extends: extendz};\n}\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  // Given a node and scope name, add a scoping class to each node\n  // in the tree. This facilitates transforming css into scoped rules.\n  dom(node, scope, shouldRemoveScope) {\n    // one time optimization to skip scoping...\n    if (node['__styleScoped']) {\n      node['__styleScoped'] = null;\n    } else {\n      this._transformDom(node, scope || '', shouldRemoveScope);\n    }\n  }\n\n  _transformDom(node, selector, shouldRemoveScope) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      this.element(node, selector, shouldRemoveScope);\n    }\n    let c$ = (node.localName === 'template') ?\n      (node.content || node._content).childNodes :\n      node.children || node.childNodes;\n    if (c$) {\n      for (let i=0; i<c$.length; i++) {\n        this._transformDom(c$[i], selector, shouldRemoveScope);\n      }\n    }\n  }\n\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  elementStyles(element, styleRules, callback) {\n    let cssBuildType = element['__cssBuild'];\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    let cssText = '';\n    if (nativeShadow || cssBuildType === 'shady') {\n      cssText = toCssText(styleRules, callback);\n    } else {\n      let {is, extends: ex} = getIsExtends(element);\n      cssText = this.css(styleRules, is, ex, callback) + '\\n\\n';\n    }\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return toCssText(rules, function(/** StyleNode */rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? `[is=${scope}]` : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  /**\n   * transforms a css rule to a scoped rule.\n   *\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule['selector'] = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = rule['selector'].split(COMPLEX_SELECTOR_SEP);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.join(COMPLEX_SELECTOR_SEP);\n  }\n\n/**\n * @param {string} selector\n * @param {string} scope\n * @param {string=} hostScope\n */\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`);\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir) =>\n      `[dir=\"${dir}\"] ${before}, ${before}[dir=\"${dir}\"]`);\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    let p$ = selector.split(PSEUDO_PREFIX);\n    p$[0] += scope;\n    return p$.join(PSEUDO_PREFIX);\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule['selector'] = rule['parsedSelector'];\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  normalizeRootSelector(rule) {\n    if (rule['selector'] === ROOT) {\n      rule['selector'] = 'html';\n    }\n  }\n\n/**\n * @param {string} selector\n */\n  _transformDocumentSelector(selector) {\n    return selector.match(SLOTTED) ?\n      this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR) :\n      this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n  }\n}\n\nlet NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nlet SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nlet COMPLEX_SELECTOR_SEP = ',';\nlet SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g;\nlet SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nlet HOST = ':host';\nlet ROOT = ':root';\nlet SLOTTED = '::slotted';\nlet SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nlet HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nlet SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nlet DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)/;\nlet CSS_CLASS_PREFIX = '.';\nlet PSEUDO_PREFIX = ':';\nlet CLASS = 'class';\nlet SELECTOR_NO_MATCH = 'should_not_match';\n\nvar StyleTransformer$1 = new StyleTransformer();\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/** @const {string} */\nconst infoKey = '__styleInfo';\n\nclass StyleInfo {\n  /**\n   * @param {Element} node\n   * @return {StyleInfo}\n   */\n  static get(node) {\n    if (node) {\n      return node[infoKey];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * @param {!Element} node\n   * @param {StyleInfo} styleInfo\n   * @return {StyleInfo}\n   */\n  static set(node, styleInfo) {\n    node[infoKey] = styleInfo;\n    return styleInfo;\n  }\n  /**\n   * @param {StyleNode} ast\n   * @param {Node=} placeholder\n   * @param {Array<string>=} ownStylePropertyNames\n   * @param {string=} elementName\n   * @param {string=} typeExtension\n   * @param {string=} cssBuild\n   */\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    /** @type {StyleNode} */\n    this.styleRules = ast || null;\n    /** @type {Node} */\n    this.placeholder = placeholder || null;\n    /** @type {!Array<string>} */\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    /** @type {Array<Object>} */\n    this.overrideStyleProperties = null;\n    /** @type {string} */\n    this.elementName = elementName || '';\n    /** @type {string} */\n    this.cssBuild = cssBuild || '';\n    /** @type {string} */\n    this.typeExtension = typeExtension || '';\n    /** @type {Object<string, string>} */\n    this.styleProperties = null;\n    /** @type {?string} */\n    this.scopeSelector = null;\n    /** @type {HTMLStyleElement} */\n    this.customStyle = null;\n  }\n  _getStyleRules() {\n    return this.styleRules;\n  }\n}\n\nStyleInfo.prototype['_getStyleRules'] = StyleInfo.prototype._getStyleRules;\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// TODO: dedupe with shady\n/**\n * @const {function(string):boolean}\n */\nconst matchesSelector = ((p) => p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\np.oMatchesSelector || p.webkitMatchesSelector)(window.Element.prototype);\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n/**\n * decorates styles with rule info and returns an array of used style property names\n *\n * @param {StyleNode} rules\n * @return {Array<string>}\n */\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule['rules'] = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx = VAR_ASSIGN;\n      let cssText = rule['parsedCssText'];\n      let value;\n      let any;\n      while ((m = rx.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule['parsedCssText']);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(BRACKETED, '')\n      .replace(VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        MIXIN_MATCH.lastIndex = 0;\n        m = MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule['cssText'] = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule['cssText'];\n    let output = rule['cssText'];\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule['cssText'] = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  /**\n   * @param {StyleNode} rules\n   * @param {Element} element\n   */\n  propertyDataFromStyles(rules, element) {\n    let props = {}, self = this;\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    forEachRule(rules, function(rule) {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        self.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule['parsedSelector'];\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          self.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  /**\n   * @param {Element} scope\n   * @param {StyleNode} rule\n   * @param {string|undefined} cssBuild\n   * @param {function(Object)} callback\n   */\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let isExtends = getIsExtends(scope);\n    let hostScope = scope.is ?\n      StyleTransformer$1._calcHostScope(isExtends.is, isExtends.extends) :\n      'html';\n    let parsedSelector = rule['parsedSelector'];\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (cssBuild === 'shadow') {\n      isRoot = parsedSelector === ':host > *' || parsedSelector === 'html';\n      isHost = isHost && !isRoot;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host under ShadowDOM because `:host` does not work with `matches`\n      if (nativeShadow && !rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer$1._transformRuleCss(\n          rule,\n          StyleTransformer$1._transformComplexSelector,\n          StyleTransformer$1._calcElementScope(isExtends.is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n/**\n * @param {Element} scope\n * @param {StyleNode} rules\n * @return {Object}\n */\n  hostAndRootPropertiesForScope(scope, rules) {\n    let hostProps = {}, rootProps = {}, self = this;\n    // note: active rules excludes non-matching @media rules\n    let cssBuild = rules && rules['__cssBuild'];\n    forEachRule(rules, function(rule) {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      self.whenHostOrRootRule(scope, rule, cssBuild, function(info) {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            self.collectProperties(rule, hostProps);\n          } else {\n            self.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  /**\n   * @param {Element} element\n   * @param {Object} properties\n   * @param {string} scopeSelector\n   */\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let isExtends = getIsExtends(element);\n    let hostSelector = StyleTransformer$1\n      ._calcHostScope(isExtends.is, isExtends.extends);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(HOST_PREFIX + rxHostSelector +\n      HOST_SUFFIX);\n    let rules = StyleInfo.get(element).styleRules;\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer$1.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !isKeyframesSelector(rule) &&\n          rule['cssText']) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    });\n  }\n\n  /**\n   * @param {Element} element\n   * @param {StyleNode} rules\n   * @param {string} scopeSelector\n   * @return {Object}\n   */\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule['keyframesName']] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  /**\n   * @param {StyleNode} keyframesRule\n   * @return {function(string):string}\n   */\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n/**\n * Transforms `@keyframes` names to be unique for the current host.\n * Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n *\n * @param {StyleNode} rule\n * @param {string} scopeId\n */\n  _scopeKeyframes(rule, scopeId) {\n    rule.keyframesNameRx = new RegExp(rule['keyframesName'], 'g');\n    rule.transformedKeyframesName = rule['keyframesName'] + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    rule['selector'] = rule.transformedSelector.replace(\n        rule['keyframesName'], rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  /**\n   * @param {StyleNode} rule\n   * @param {RegExp} hostRx\n   * @param {string} hostSelector\n   * @param {string} scopeId\n   */\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = selector.split(',');\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule['selector'] = parts.join(',');\n  }\n\n  /**\n   * @param {Element} element\n   * @param {string} selector\n   * @param {string} old\n   */\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      setElementClassRaw(element, v);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element\n   * @param {Object} properties\n   * @param {string} selector\n   * @param {HTMLStyleElement} style\n   * @return {HTMLStyleElement}\n   */\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s['_useCount']--;\n      if (s['_useCount'] <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        applyStyle(style, null, styleInfo.placeholder);\n      }\n\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style['_useCount'] = style['_useCount'] || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style['_useCount']++;\n      }\n      styleInfo.customStyle = style;\n    }\n    // @media rules may be stale in IE 10 and 11\n    if (IS_IE) {\n      style.textContent = style.textContent;\n    }\n    return style;\n  }\n\n  /**\n   * @param {Element} style\n   * @param {Object} properties\n   */\n  applyCustomStyle(style, properties) {\n    let rules = rulesForStyle(/** @type {HTMLStyleElement} */(style));\n    let self = this;\n    style.textContent = toCssText(rules, function(/** StyleNode */rule) {\n      let css = rule['cssText'] = rule['parsedCssText'];\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(/** @type {string} */(css));\n        // replace with reified properties, scenario is same as mixin\n        rule['cssText'] = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\n/**\n * @param {number} n\n * @param {Array<number>} bits\n */\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32, 10);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nvar StyleProperties$1 = new StyleProperties();\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet placeholderMap = {};\n\n/**\n * @const {CustomElementRegistry}\n */\nconst ce = window['customElements'];\nif (ce && !nativeShadow) {\n  /**\n   * @const {function(this:CustomElementRegistry, string,function(new:HTMLElement),{extends: string}=)}\n   */\n  const origDefine = ce['define'];\n  ce['define'] = function(name, clazz, options) {\n    placeholderMap[name] = applyStylePlaceHolder(name);\n    return origDefine.call(/** @type {!CustomElementRegistry} */(ce), name, clazz, options);\n  };\n}\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nclass StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet flush = function() {};\n\nif (!nativeShadow) {\n  let elementNeedsScoping = (element) => {\n    return (element.classList &&\n      !element.classList.contains(StyleTransformer$1.SCOPE_NAME) ||\n      // note: necessary for IE11\n      (element instanceof window['SVGElement'] && (!element.hasAttribute('class') ||\n      element.getAttribute('class').indexOf(StyleTransformer$1.SCOPE_NAME) < 0)));\n  };\n\n/**\n * @param {Array<MutationRecord|null>|null} mxns\n */\n  let handler = (mxns) => {\n    for (let x=0; x < mxns.length; x++) {\n      let mxn = mxns[x];\n      if (mxn.target === document.documentElement ||\n        mxn.target === document.head) {\n        continue;\n      }\n      for (let i=0; i < mxn.addedNodes.length; i++) {\n        let n = mxn.addedNodes[i];\n        if (elementNeedsScoping(n)) {\n          let root = n.getRootNode();\n          if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // may no longer be in a shadowroot\n            let host = /** @type {ShadowRoot} */(root).host;\n            if (host) {\n              let {is: scope} = getIsExtends(host);\n              StyleTransformer$1.dom(n, scope);\n            }\n          }\n        }\n      }\n      for (let i=0; i < mxn.removedNodes.length; i++) {\n        let n = /** @type {HTMLElement} */(mxn.removedNodes[i]);\n        if (n.nodeType === Node.ELEMENT_NODE) {\n          let classes = undefined;\n          if (n.classList) {\n            classes = Array.from(n.classList);\n          } else if (n.hasAttribute('class')) {\n            classes = n.getAttribute('class').split(/\\s+/);\n          }\n          if (classes !== undefined) {\n            // NOTE: relies on the scoping class always being adjacent to the\n            // SCOPE_NAME class.\n            let classIdx = classes.indexOf(StyleTransformer$1.SCOPE_NAME);\n            if (classIdx >= 0) {\n              let scope = classes[classIdx + 1];\n              if (scope) {\n                StyleTransformer$1.dom(n, scope, true);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  };\n  let nativeCustomElements = (window.customElements &&\n    !window['customElements']['flush']);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    };\n    // use polyfill timing if it's available\n    if (window['HTMLImports']) {\n      window['HTMLImports']['whenReady'](delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          };\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  };\n}\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nfunction invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * @param {HTMLTemplateElement} template\n */\nfunction invalidateTemplate(template) {\n  template['_applyShimInvalid'] = true;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\n\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nfunction templateIsValid(template) {\n  return !template['_applyShimInvalid'];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\n\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nfunction templateIsValidating(template) {\n  return template._validating;\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n*/\n\n\n/**\n * @param {HTMLTemplateElement} template\n */\nfunction startValidatingTemplate(template) {\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      template['_applyShimInvalid'] = false;\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/** @type {Promise<void>} */\nlet readyPromise = null;\n\n/** @type {?function(?function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @type {function()} */\nlet resolveFn;\n\n/**\n * @param {?function()} callback\n */\nfunction documentWait(callback) {\n  if (whenReady) {\n    whenReady(callback);\n  } else {\n    if (!readyPromise) {\n      readyPromise = new Promise((resolve) => {resolveFn = resolve;});\n      if (document.readyState === 'complete') {\n        resolveFn();\n      } else {\n        document.addEventListener('readystatechange', () => {\n          if (document.readyState === 'complete') {\n            resolveFn();\n          }\n        });\n      }\n    }\n    readyPromise.then(function(){ callback && callback(); });\n  }\n}\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nfunction updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @typedef {HTMLStyleElement | ({getStyle: (function():HTMLStyleElement)})}\n */\n\n\nconst PROCESSED_MARKER = '__processedByShadyCSS';\nconst SEEN_MARKER = '__seenByShadyCSS';\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nclass CustomStyleInterface$1 {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued'] || !validateFn) {\n      return;\n    }\n    this['enqueued'] = true;\n    documentWait(validateFn);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  findStyles() {\n    let cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      let customStyle = cs[i];\n      if (customStyle[PROCESSED_MARKER]) {\n        continue;\n      }\n      let style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        customStyle[PROCESSED_MARKER] = true;\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        let appliedStyle = /** @type {HTMLStyleElement} */(style['__appliedElement']);\n        if (appliedStyle) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            appliedStyle.setAttribute(attr.name, attr.value);\n          }\n        }\n        if (transformFn) {\n          transformFn(appliedStyle || style);\n        }\n      }\n    }\n  }\n}\n\nCustomStyleInterface$1.prototype['addCustomStyle'] = CustomStyleInterface$1.prototype.addCustomStyle;\nCustomStyleInterface$1.prototype['getStyleForCustomStyle'] = CustomStyleInterface$1.prototype.getStyleForCustomStyle;\nCustomStyleInterface$1.prototype['findStyles'] = CustomStyleInterface$1.prototype.findStyles;\n\nObject.defineProperties(CustomStyleInterface$1.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /**\n     * @param {?function()} fn\n     * @this {CustomStyleInterface}\n     */\n    set(fn) {\n      let needsEnqueue = false;\n      if (!validateFn) {\n        needsEnqueue = true;\n      }\n      validateFn = fn;\n      if (needsEnqueue) {\n        this.enqueueDocumentValidation();\n      }\n    },\n  }\n});\n\n/** @typedef {{\n * customStyles: !Array<!CustomStyleProvider>,\n * addCustomStyle: function(!CustomStyleProvider),\n * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,\n * findStyles: function(),\n * transformCallback: ?function(!HTMLStyleElement),\n * validateCallback: ?function()\n * }}\n */\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @const {StyleCache}\n */\nconst styleCache = new StyleCache();\n\nclass ScopingShim {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = document.documentElement;\n    let ast = new StyleNode();\n    ast['rules'] = [];\n    this._documentOwnerStyleInfo = StyleInfo.set(document.documentElement, new StyleInfo(ast));\n    this._elementsHaveApplied = false;\n    this._applyShim = null;\n    /** @type {?CustomStyleInterfaceInterface} */\n    this._customStyleInterface = null;\n    documentWait(() => {\n      this._ensure();\n    });\n  }\n  flush() {\n    flush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return toCssText(ast);\n  }\n  _gatherStyles(template) {\n    let styles = template.content.querySelectorAll('style');\n    let cssText = [];\n    for (let i = 0; i < styles.length; i++) {\n      let s = styles[i];\n      cssText.push(s.textContent);\n      s.parentNode.removeChild(s);\n    }\n    return cssText.join('').trim();\n  }\n  _getCssBuild(template) {\n    let style = template.content.querySelector('style');\n    if (!style) {\n      return '';\n    }\n    return style.getAttribute('css-build') || '';\n  }\n  /**\n   * Prepare the styling and template for the given element type\n   *\n   * @param {HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplate(template, elementName, typeExtension) {\n    if (template._prepared) {\n      return;\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = this._getCssBuild(template);\n    let cssText = this._gatherStyles(template);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n      __cssBuild: cssBuild,\n    };\n    if (!nativeShadow) {\n      StyleTransformer$1.dom(template.content, elementName);\n    }\n    // check if the styling has mixin definitions or uses\n    this._ensure();\n    let hasMixins = this._applyShim['detectMixin'](cssText);\n    let ast = parse(cssText);\n    // only run the applyshim transforms if there is a mixin involved\n    if (hasMixins && nativeCssVariables) {\n      this._applyShim['transformRules'](ast, elementName);\n    }\n    template._styleAst = ast;\n    template._cssBuild = cssBuild;\n\n    let ownPropertyNames = [];\n    if (!nativeCssVariables) {\n      ownPropertyNames = StyleProperties$1.decorateStyles(template._styleAst, info);\n    }\n    if (!ownPropertyNames.length || nativeCssVariables) {\n      let root = nativeShadow ? template.content : null;\n      let placeholder = placeholderMap[elementName];\n      let style = this._generateStaticStyle(info, template._styleAst, root, placeholder);\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n  _generateStaticStyle(info, rules, shadowroot, placeholder) {\n    let cssText = StyleTransformer$1.elementStyles(info, rules);\n    if (cssText.length) {\n      return applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n  }\n  _prepareHost(host) {\n    let {is, extends: typeExtension} = getIsExtends(host);\n    let placeholder = placeholderMap[is];\n    let template = templateMap[is];\n    let ast;\n    let ownStylePropertyNames;\n    let cssBuild;\n    if (template) {\n      ast = template._styleAst;\n      ownStylePropertyNames = template._ownPropertyNames;\n      cssBuild = template._cssBuild;\n    }\n    return StyleInfo.set(host,\n      new StyleInfo(\n        ast,\n        placeholder,\n        ownStylePropertyNames,\n        is,\n        typeExtension,\n        cssBuild\n      )\n    );\n  }\n  _ensureApplyShim() {\n    if (this._applyShim) {\n      return;\n    } else if (window.ShadyCSS.ApplyShim) {\n      this._applyShim = window.ShadyCSS.ApplyShim;\n      this._applyShim['invalidCallback'] = invalidate;\n    } else {\n      this._applyShim = {\n        /* eslint-disable no-unused-vars */\n        ['detectMixin'](str){return false},\n        ['transformRule'](ast){},\n        ['transformRules'](ast, name){},\n        /* eslint-enable no-unused-vars */\n      };\n    }\n  }\n  _ensureCustomStyleInterface() {\n    if (this._customStyleInterface) {\n      return;\n    } else if (window.ShadyCSS.CustomStyleInterface) {\n      this._customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */(window.ShadyCSS.CustomStyleInterface);\n      /** @type {function(!HTMLStyleElement)} */\n      this._customStyleInterface['transformCallback'] = (style) => {this.transformCustomStyleForDocument(style);};\n      this._customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this._customStyleInterface['enqueued'] || this._elementsHaveApplied) {\n            this.flushCustomStyles();\n          }\n        });\n      };\n    } else {\n      this._customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */({\n        ['findStyles']() {},\n        ['enqueued']: false,\n        ['getStyleForCustomStyle'](s) { return null } // eslint-disable-line no-unused-vars\n      });\n    }\n  }\n  _ensure() {\n    this._ensureApplyShim();\n    this._ensureCustomStyleInterface();\n  }\n  /**\n   * Flush and apply custom styles to document\n   */\n  flushCustomStyles() {\n    this._ensure();\n    this._customStyleInterface['findStyles']();\n    // early return if custom-styles don't need validation\n    if (!this._customStyleInterface['enqueued']) {\n      return;\n    }\n    let customStyles = this._customStyleInterface['customStyles'];\n    if (!nativeCssVariables) {\n      this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n      this._applyCustomStyles(customStyles);\n    } else {\n      this._revalidateCustomStyleApplyShim(customStyles);\n    }\n    this._customStyleInterface['enqueued'] = false;\n    // if custom elements have upgraded and there are no native css variables, we must recalculate the whole tree\n    if (this._elementsHaveApplied && !nativeCssVariables) {\n      this.styleDocument();\n    }\n  }\n  /**\n   * Apply styles for the given element\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} overrideProps\n   */\n  styleElement(host, overrideProps) {\n    let {is} = getIsExtends(host);\n    let styleInfo = StyleInfo.get(host);\n    if (!styleInfo) {\n      styleInfo = this._prepareHost(host);\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (overrideProps) {\n      styleInfo.overrideStyleProperties =\n        styleInfo.overrideStyleProperties || {};\n      Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n    }\n    if (!nativeCssVariables) {\n     this._updateProperties(host, styleInfo);\n      if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n        this._applyStyleProperties(host, styleInfo);\n      }\n    } else {\n      if (styleInfo.overrideStyleProperties) {\n        updateNativeProperties(host, styleInfo.overrideStyleProperties);\n      }\n      let template = templateMap[is];\n      // bail early if there is no shadowroot for this element\n      if (!template && !this._isRootOwner(host)) {\n        return;\n      }\n      if (template && template._style && !templateIsValid(template)) {\n        // update template\n        if (!templateIsValidating(template)) {\n          this._ensure();\n          this._applyShim['transformRules'](template._styleAst, is);\n          template._style.textContent = StyleTransformer$1.elementStyles(host, styleInfo.styleRules);\n          startValidatingTemplate(template);\n        }\n        // update instance if native shadowdom\n        if (nativeShadow) {\n          let root = host.shadowRoot;\n          if (root) {\n            let style = root.querySelector('style');\n            style.textContent = StyleTransformer$1.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n        styleInfo.styleRules = template._styleAst;\n      }\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = node.getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = getIsExtends(host).is;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties$1.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!nativeShadow) {\n      StyleProperties$1.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties$1.hostAndRootPropertiesForScope(host, styleInfo.styleRules);\n    let propertyData = StyleProperties$1.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties;\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties$1.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  /**\n   * Update styles of the whole document\n   *\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.styleSubtree(this._documentOwner, properties);\n  }\n  /**\n   * Update styles of a subtree\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} properties\n   */\n  styleSubtree(host, properties) {\n    if (host.shadowRoot || this._isRootOwner(host)) {\n      this.styleElement(host, properties);\n    }\n    // process the shadowdom children of `root`\n    let root = host.shadowRoot;\n    let shadowChildren = root && (root.children || root.childNodes);\n    if (shadowChildren) {\n      for (let i = 0; i < shadowChildren.length; i++) {\n        let c = /** @type {!HTMLElement} */(shadowChildren[i]);\n        this.styleSubtree(c);\n      }\n    }\n    // process the lightdom children of `root`\n    let children = host.children || host.childNodes;\n    if (children) {\n      for (let i = 0; i < children.length; i++) {\n        let c = /** @type {!HTMLElement} */(children[i]);\n        this.styleSubtree(c);\n      }\n    }\n  }\n  /* Custom Style operations */\n  _revalidateCustomStyleApplyShim(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        this._revalidateApplyShim(s);\n      }\n    }\n  }\n  _applyCustomStyles(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        StyleProperties$1.applyCustomStyle(s, this._documentOwnerStyleInfo.styleProperties);\n      }\n    }\n  }\n  transformCustomStyleForDocument(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer$1.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer$1.documentRule(rule);\n      }\n      if (nativeCssVariables) {\n        this._ensure();\n        this._applyShim['transformRule'](rule);\n      }\n    });\n    if (nativeCssVariables) {\n      style.textContent = toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules.rules.push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (nativeCssVariables) {\n      let ast = rulesForStyle(style);\n      this._ensure();\n      this._applyShim['transformRules'](ast);\n      style.textContent = toCssText(ast);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!nativeCssVariables) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value.trim();\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = element.getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer$1.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer$1.SCOPE_NAME, scopeName);\n    }\n    if (!nativeCssVariables) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties$1.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n}\n\n/* exports */\nScopingShim.prototype['flush'] = ScopingShim.prototype.flush;\nScopingShim.prototype['prepareTemplate'] = ScopingShim.prototype.prepareTemplate;\nScopingShim.prototype['styleElement'] = ScopingShim.prototype.styleElement;\nScopingShim.prototype['styleDocument'] = ScopingShim.prototype.styleDocument;\nScopingShim.prototype['styleSubtree'] = ScopingShim.prototype.styleSubtree;\nScopingShim.prototype['getComputedStyleValue'] = ScopingShim.prototype.getComputedStyleValue;\nScopingShim.prototype['setElementClass'] = ScopingShim.prototype.setElementClass;\nScopingShim.prototype['_styleInfoForNode'] = ScopingShim.prototype._styleInfoForNode;\nScopingShim.prototype['transformCustomStyleForDocument'] = ScopingShim.prototype.transformCustomStyleForDocument;\nScopingShim.prototype['getStyleAst'] = ScopingShim.prototype.getStyleAst;\nScopingShim.prototype['styleAstToString'] = ScopingShim.prototype.styleAstToString;\nScopingShim.prototype['flushCustomStyles'] = ScopingShim.prototype.flushCustomStyles;\nObject.defineProperties(ScopingShim.prototype, {\n  'nativeShadow': {\n    get() {\n      return nativeShadow;\n    }\n  },\n  'nativeCss': {\n    get() {\n      return nativeCssVariables;\n    }\n  }\n});\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/** @const {ScopingShim} */\nconst scopingShim = new ScopingShim();\n\nlet ApplyShim;\nlet CustomStyleInterface;\n\nif (window['ShadyCSS']) {\n  ApplyShim = window['ShadyCSS']['ApplyShim'];\n  CustomStyleInterface = window['ShadyCSS']['CustomStyleInterface'];\n}\n\nwindow.ShadyCSS = {\n  ScopingShim: scopingShim,\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplate(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplate(template, elementName, elementExtends);\n  },\n\n  /**\n   * @param {!HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleSubtree(element, properties);\n  },\n\n  /**\n   * @param {!HTMLElement} element\n   */\n  styleElement(element) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleElement(element);\n  },\n\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleDocument(properties);\n  },\n\n  /**\n   * @param {Element} element\n   * @param {string} property\n   * @return {string}\n   */\n  getComputedStyleValue(element, property) {\n    return scopingShim.getComputedStyleValue(element, property);\n  },\n\n  nativeCss: nativeCssVariables,\n\n  nativeShadow: nativeShadow\n};\n\nif (ApplyShim) {\n  window.ShadyCSS.ApplyShim = ApplyShim;\n}\n\nif (CustomStyleInterface) {\n  window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n}\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * Polyfills loaded: None\n * Used in: Chrome\n */\n\n// TODO: This needs to not exist at all.\n\n// TODO(notwaldorf): Remove after this is addressed:\n// https://github.com/webcomponents/shadycss/issues/46\n\n}());\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport let nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nexport let nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n/**\n * @param {ShadyCSSOptions | ShadyCSSInterface | undefined} settings\n */\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings['nativeCss'] && !settings['shimcssproperties'];\n  nativeShadow = nativeShadow && !settings['nativeShadow'] && !settings['shimshadow'];\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window.ShadyCSS);\n} else if (window['WebComponents']) {\n  parseSettings(window['WebComponents']['flags']);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables} from './style-settings'\nimport {parse, stringify, types, StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n */\nexport function toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'];\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\n/**\n * @param {Node} style\n * @param {?Node} target\n * @param {?Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return /** @type {HTMLStyleElement} */(target.insertBefore(style, after));\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {Element}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/** @type {Node} */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {Node}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * @param {Element} element\n * @return {?string}\n */\nexport function getCssBuildType(element) {\n  return element.getAttribute('css-build');\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window['ShadyDOM']) {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\n/**\n * @param {Element|Object} element\n * @return {{is: string, extends: string}}\n */\nexport function getIsExtends(element) {\n  let is = element.is || (element.getAttribute && element.getAttribute('is')) || element.localName;\n  let extendz = element.extends || element.localName !== is ? element.localName : '';\n  return {is, extends: extendz};\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {removeCustomPropAssignment, StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\nimport {nativeShadow} from './style-settings'\nimport StyleTransformer from './style-transformer'\nimport * as StyleUtil from './style-util'\nimport * as RX from './common-regex'\nimport StyleInfo from './style-info'\n\n// TODO: dedupe with shady\n/**\n * @const {function(string):boolean}\n */\nconst matchesSelector = ((p) => p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\np.oMatchesSelector || p.webkitMatchesSelector)(window.Element.prototype);\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n/**\n * decorates styles with rule info and returns an array of used style property names\n *\n * @param {StyleNode} rules\n * @return {Array<string>}\n */\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    StyleUtil.forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule['rules'] = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx = RX.VAR_ASSIGN;\n      let cssText = rule['parsedCssText'];\n      let value;\n      let any;\n      while ((m = rx.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule['parsedCssText']);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(RX.BRACKETED, '')\n      .replace(RX.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = RX.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = StyleUtil.processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        RX.MIXIN_MATCH.lastIndex = 0;\n        m = RX.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule['cssText'] = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule['cssText'];\n    let output = rule['cssText'];\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = RX.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule['cssText'] = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  /**\n   * @param {StyleNode} rules\n   * @param {Element} element\n   */\n  propertyDataFromStyles(rules, element) {\n    let props = {}, self = this;\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, function(rule) {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        self.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule['parsedSelector'];\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          self.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  /**\n   * @param {Element} scope\n   * @param {StyleNode} rule\n   * @param {string|undefined} cssBuild\n   * @param {function(Object)} callback\n   */\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let isExtends = StyleUtil.getIsExtends(scope);\n    let hostScope = scope.is ?\n      StyleTransformer._calcHostScope(isExtends.is, isExtends.extends) :\n      'html';\n    let parsedSelector = rule['parsedSelector'];\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (cssBuild === 'shadow') {\n      isRoot = parsedSelector === ':host > *' || parsedSelector === 'html';\n      isHost = isHost && !isRoot;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host under ShadowDOM because `:host` does not work with `matches`\n      if (nativeShadow && !rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer._transformRuleCss(\n          rule,\n          StyleTransformer._transformComplexSelector,\n          StyleTransformer._calcElementScope(isExtends.is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n/**\n * @param {Element} scope\n * @param {StyleNode} rules\n * @return {Object}\n */\n  hostAndRootPropertiesForScope(scope, rules) {\n    let hostProps = {}, rootProps = {}, self = this;\n    // note: active rules excludes non-matching @media rules\n    let cssBuild = rules && rules['__cssBuild'];\n    StyleUtil.forEachRule(rules, function(rule) {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      self.whenHostOrRootRule(scope, rule, cssBuild, function(info) {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            self.collectProperties(rule, hostProps);\n          } else {\n            self.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  /**\n   * @param {Element} element\n   * @param {Object} properties\n   * @param {string} scopeSelector\n   */\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let isExtends = StyleUtil.getIsExtends(element);\n    let hostSelector = StyleTransformer\n      ._calcHostScope(isExtends.is, isExtends.extends);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(RX.HOST_PREFIX + rxHostSelector +\n      RX.HOST_SUFFIX);\n    let rules = StyleInfo.get(element).styleRules;\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !StyleUtil.isKeyframesSelector(rule) &&\n          rule['cssText']) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    });\n  }\n\n  /**\n   * @param {Element} element\n   * @param {StyleNode} rules\n   * @param {string} scopeSelector\n   * @return {Object}\n   */\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule['keyframesName']] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  /**\n   * @param {StyleNode} keyframesRule\n   * @return {function(string):string}\n   */\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n/**\n * Transforms `@keyframes` names to be unique for the current host.\n * Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n *\n * @param {StyleNode} rule\n * @param {string} scopeId\n */\n  _scopeKeyframes(rule, scopeId) {\n    rule.keyframesNameRx = new RegExp(rule['keyframesName'], 'g');\n    rule.transformedKeyframesName = rule['keyframesName'] + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    rule['selector'] = rule.transformedSelector.replace(\n        rule['keyframesName'], rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  /**\n   * @param {StyleNode} rule\n   * @param {RegExp} hostRx\n   * @param {string} hostSelector\n   * @param {string} scopeId\n   */\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = selector.split(',');\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule['selector'] = parts.join(',');\n  }\n\n  /**\n   * @param {Element} element\n   * @param {string} selector\n   * @param {string} old\n   */\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      StyleUtil.setElementClassRaw(element, v);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element\n   * @param {Object} properties\n   * @param {string} selector\n   * @param {HTMLStyleElement} style\n   * @return {HTMLStyleElement}\n   */\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s['_useCount']--;\n      if (s['_useCount'] <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = StyleUtil.applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = StyleUtil.applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        StyleUtil.applyStyle(style, null, styleInfo.placeholder);\n      }\n\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style['_useCount'] = style['_useCount'] || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style['_useCount']++;\n      }\n      styleInfo.customStyle = style;\n    }\n    // @media rules may be stale in IE 10 and 11\n    if (IS_IE) {\n      style.textContent = style.textContent;\n    }\n    return style;\n  }\n\n  /**\n   * @param {Element} style\n   * @param {Object} properties\n   */\n  applyCustomStyle(style, properties) {\n    let rules = StyleUtil.rulesForStyle(/** @type {HTMLStyleElement} */(style));\n    let self = this;\n    style.textContent = StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      let css = rule['cssText'] = rule['parsedCssText'];\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(/** @type {string} */(css));\n        // replace with reified properties, scenario is same as mixin\n        rule['cssText'] = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\n/**\n * @param {number} n\n * @param {Array<number>} bits\n */\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32, 10);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nexport default new StyleProperties();","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map'\nimport {StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  template['_applyShimInvalid'] = true;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return !template['_applyShimInvalid'];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return template._validating;\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      template['_applyShimInvalid'] = false;\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {Promise<void>} */\nlet readyPromise = null;\n\n/** @type {?function(?function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @type {function()} */\nlet resolveFn;\n\n/**\n * @param {?function()} callback\n */\nexport default function documentWait(callback) {\n  if (whenReady) {\n    whenReady(callback)\n  } else {\n    if (!readyPromise) {\n      readyPromise = new Promise((resolve) => {resolveFn = resolve});\n      if (document.readyState === 'complete') {\n        resolveFn();\n      } else {\n        document.addEventListener('readystatechange', () => {\n          if (document.readyState === 'complete') {\n            resolveFn();\n          }\n        });\n      }\n    }\n    readyPromise.then(function(){ callback && callback(); });\n  }\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  return window.getComputedStyle(element).getPropertyValue(property).trim();\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media[^(]*(\\([^)]*\\))/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\nimport * as StyleUtil from './style-util'\nimport {nativeShadow} from './style-settings'\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  // Given a node and scope name, add a scoping class to each node\n  // in the tree. This facilitates transforming css into scoped rules.\n  dom(node, scope, shouldRemoveScope) {\n    // one time optimization to skip scoping...\n    if (node['__styleScoped']) {\n      node['__styleScoped'] = null;\n    } else {\n      this._transformDom(node, scope || '', shouldRemoveScope);\n    }\n  }\n\n  _transformDom(node, selector, shouldRemoveScope) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      this.element(node, selector, shouldRemoveScope);\n    }\n    let c$ = (node.localName === 'template') ?\n      (node.content || node._content).childNodes :\n      node.children || node.childNodes;\n    if (c$) {\n      for (let i=0; i<c$.length; i++) {\n        this._transformDom(c$[i], selector, shouldRemoveScope);\n      }\n    }\n  }\n\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            StyleUtil.setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          StyleUtil.setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  elementStyles(element, styleRules, callback) {\n    let cssBuildType = element['__cssBuild'];\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    let cssText = '';\n    if (nativeShadow || cssBuildType === 'shady') {\n      cssText = StyleUtil.toCssText(styleRules, callback);\n    } else {\n      let {is, extends: ex} = StyleUtil.getIsExtends(element);\n      cssText = this.css(styleRules, is, ex, callback) + '\\n\\n';\n    }\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? `[is=${scope}]` : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  /**\n   * transforms a css rule to a scoped rule.\n   *\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule['selector'] = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = rule['selector'].split(COMPLEX_SELECTOR_SEP);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!StyleUtil.isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.join(COMPLEX_SELECTOR_SEP);\n  }\n\n/**\n * @param {string} selector\n * @param {string} scope\n * @param {string=} hostScope\n */\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`);\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir) =>\n      `[dir=\"${dir}\"] ${before}, ${before}[dir=\"${dir}\"]`);\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    let p$ = selector.split(PSEUDO_PREFIX);\n    p$[0] += scope;\n    return p$.join(PSEUDO_PREFIX);\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule['selector'] = rule['parsedSelector'];\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  normalizeRootSelector(rule) {\n    if (rule['selector'] === ROOT) {\n      rule['selector'] = 'html';\n    }\n  }\n\n/**\n * @param {string} selector\n */\n  _transformDocumentSelector(selector) {\n    return selector.match(SLOTTED) ?\n      this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR) :\n      this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n  }\n}\n\nlet NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nlet SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nlet COMPLEX_SELECTOR_SEP = ',';\nlet SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g;\nlet SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nlet HOST = ':host';\nlet ROOT = ':root';\nlet SLOTTED = '::slotted';\nlet SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nlet HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nlet SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nlet DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)/;\nlet CSS_CLASS_PREFIX = '.';\nlet PSEUDO_PREFIX = ':';\nlet CLASS = 'class';\nlet SELECTOR_NO_MATCH = 'should_not_match';\n\nexport default new StyleTransformer()","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\n\n/** @const {string} */\nconst infoKey = '__styleInfo';\n\nexport default class StyleInfo {\n  /**\n   * @param {Element} node\n   * @return {StyleInfo}\n   */\n  static get(node) {\n    if (node) {\n      return node[infoKey];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * @param {!Element} node\n   * @param {StyleInfo} styleInfo\n   * @return {StyleInfo}\n   */\n  static set(node, styleInfo) {\n    node[infoKey] = styleInfo;\n    return styleInfo;\n  }\n  /**\n   * @param {StyleNode} ast\n   * @param {Node=} placeholder\n   * @param {Array<string>=} ownStylePropertyNames\n   * @param {string=} elementName\n   * @param {string=} typeExtension\n   * @param {string=} cssBuild\n   */\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    /** @type {StyleNode} */\n    this.styleRules = ast || null;\n    /** @type {Node} */\n    this.placeholder = placeholder || null;\n    /** @type {!Array<string>} */\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    /** @type {Array<Object>} */\n    this.overrideStyleProperties = null;\n    /** @type {string} */\n    this.elementName = elementName || '';\n    /** @type {string} */\n    this.cssBuild = cssBuild || '';\n    /** @type {string} */\n    this.typeExtension = typeExtension || '';\n    /** @type {Object<string, string>} */\n    this.styleProperties = null;\n    /** @type {?string} */\n    this.scopeSelector = null;\n    /** @type {HTMLStyleElement} */\n    this.customStyle = null;\n  }\n  _getStyleRules() {\n    return this.styleRules;\n  }\n}\n\nStyleInfo.prototype['_getStyleRules'] = StyleInfo.prototype._getStyleRules;","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {applyStylePlaceHolder} from './style-util'\nimport {nativeShadow} from './style-settings'\n\nlet placeholderMap = {};\n\n/**\n * @const {CustomElementRegistry}\n */\nconst ce = window['customElements'];\nif (ce && !nativeShadow) {\n  /**\n   * @const {function(this:CustomElementRegistry, string,function(new:HTMLElement),{extends: string}=)}\n   */\n  const origDefine = ce['define'];\n  ce['define'] = function(name, clazz, options) {\n    placeholderMap[name] = applyStylePlaceHolder(name);\n    return origDefine.call(/** @type {!CustomElementRegistry} */(ce), name, clazz, options);\n  };\n}\n\nexport default placeholderMap;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow} from './style-settings'\nimport StyleTransformer from './style-transformer'\nimport {getIsExtends} from './style-util'\n\nexport let flush = function() {};\n\nif (!nativeShadow) {\n  let elementNeedsScoping = (element) => {\n    return (element.classList &&\n      !element.classList.contains(StyleTransformer.SCOPE_NAME) ||\n      // note: necessary for IE11\n      (element instanceof window['SVGElement'] && (!element.hasAttribute('class') ||\n      element.getAttribute('class').indexOf(StyleTransformer.SCOPE_NAME) < 0)));\n  }\n\n/**\n * @param {Array<MutationRecord|null>|null} mxns\n */\n  let handler = (mxns) => {\n    for (let x=0; x < mxns.length; x++) {\n      let mxn = mxns[x];\n      if (mxn.target === document.documentElement ||\n        mxn.target === document.head) {\n        continue;\n      }\n      for (let i=0; i < mxn.addedNodes.length; i++) {\n        let n = mxn.addedNodes[i];\n        if (elementNeedsScoping(n)) {\n          let root = n.getRootNode();\n          if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // may no longer be in a shadowroot\n            let host = /** @type {ShadowRoot} */(root).host;\n            if (host) {\n              let {is: scope} = getIsExtends(host);\n              StyleTransformer.dom(n, scope);\n            }\n          }\n        }\n      }\n      for (let i=0; i < mxn.removedNodes.length; i++) {\n        let n = /** @type {HTMLElement} */(mxn.removedNodes[i]);\n        if (n.nodeType === Node.ELEMENT_NODE) {\n          let classes = undefined;\n          if (n.classList) {\n            classes = Array.from(n.classList);\n          } else if (n.hasAttribute('class')) {\n            classes = n.getAttribute('class').split(/\\s+/);\n          }\n          if (classes !== undefined) {\n            // NOTE: relies on the scoping class always being adjacent to the\n            // SCOPE_NAME class.\n            let classIdx = classes.indexOf(StyleTransformer.SCOPE_NAME);\n            if (classIdx >= 0) {\n              let scope = classes[classIdx + 1];\n              if (scope) {\n                StyleTransformer.dom(n, scope, true);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  }\n  let nativeCustomElements = (window.customElements &&\n    !window['customElements']['flush']);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    }\n    // use polyfill timing if it's available\n    if (window['HTMLImports']) {\n      window['HTMLImports']['whenReady'](delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          }\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\nexport default templateMap;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport documentWait from './document-wait'\n\n/**\n * @typedef {HTMLStyleElement | ({getStyle: (function():HTMLStyleElement)})}\n */\nexport let CustomStyleProvider;\n\nconst PROCESSED_MARKER = '__processedByShadyCSS';\nconst SEEN_MARKER = '__seenByShadyCSS';\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nexport default class CustomStyleInterface {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued'] || !validateFn) {\n      return;\n    }\n    this['enqueued'] = true;\n    documentWait(validateFn);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  findStyles() {\n    let cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      let customStyle = cs[i];\n      if (customStyle[PROCESSED_MARKER]) {\n        continue;\n      }\n      let style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        customStyle[PROCESSED_MARKER] = true;\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        let appliedStyle = /** @type {HTMLStyleElement} */(style['__appliedElement']);\n        if (appliedStyle) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            appliedStyle.setAttribute(attr.name, attr.value);\n          }\n        }\n        if (transformFn) {\n          transformFn(appliedStyle || style);\n        }\n      }\n    }\n  }\n}\n\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['findStyles'] = CustomStyleInterface.prototype.findStyles;\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /**\n     * @param {?function()} fn\n     * @this {CustomStyleInterface}\n     */\n    set(fn) {\n      let needsEnqueue = false;\n      if (!validateFn) {\n        needsEnqueue = true;\n      }\n      validateFn = fn;\n      if (needsEnqueue) {\n        this.enqueueDocumentValidation();\n      }\n    },\n  }\n})\n\n/** @typedef {{\n * customStyles: !Array<!CustomStyleProvider>,\n * addCustomStyle: function(!CustomStyleProvider),\n * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,\n * findStyles: function(),\n * transformCallback: ?function(!HTMLStyleElement),\n * validateCallback: ?function()\n * }}\n */\nexport let CustomStyleInterfaceInterface;","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {parse, StyleNode} from './css-parse'\nimport {nativeShadow, nativeCssVariables} from './style-settings'\nimport StyleTransformer from './style-transformer'\nimport * as StyleUtil from './style-util'\nimport StyleProperties from './style-properties'\nimport placeholderMap from './style-placeholder'\nimport StyleInfo from './style-info'\nimport StyleCache from './style-cache'\nimport {flush as watcherFlush} from './document-watcher'\nimport templateMap from './template-map'\nimport * as ApplyShimUtils from './apply-shim-utils'\nimport documentWait from './document-wait'\nimport {updateNativeProperties} from './common-utils'\nimport {CustomStyleInterfaceInterface} from './custom-style-interface' //eslint-disable-line no-unused-vars\n\n/**\n * @const {StyleCache}\n */\nconst styleCache = new StyleCache();\n\nexport default class ScopingShim {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = document.documentElement;\n    let ast = new StyleNode();\n    ast['rules'] = [];\n    this._documentOwnerStyleInfo = StyleInfo.set(document.documentElement, new StyleInfo(ast));\n    this._elementsHaveApplied = false;\n    this._applyShim = null;\n    /** @type {?CustomStyleInterfaceInterface} */\n    this._customStyleInterface = null;\n    documentWait(() => {\n      this._ensure();\n    });\n  }\n  flush() {\n    watcherFlush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return StyleUtil.rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return StyleUtil.toCssText(ast);\n  }\n  _gatherStyles(template) {\n    let styles = template.content.querySelectorAll('style');\n    let cssText = [];\n    for (let i = 0; i < styles.length; i++) {\n      let s = styles[i];\n      cssText.push(s.textContent);\n      s.parentNode.removeChild(s);\n    }\n    return cssText.join('').trim();\n  }\n  _getCssBuild(template) {\n    let style = template.content.querySelector('style');\n    if (!style) {\n      return '';\n    }\n    return style.getAttribute('css-build') || '';\n  }\n  /**\n   * Prepare the styling and template for the given element type\n   *\n   * @param {HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplate(template, elementName, typeExtension) {\n    if (template._prepared) {\n      return;\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = this._getCssBuild(template);\n    let cssText = this._gatherStyles(template);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n      __cssBuild: cssBuild,\n    };\n    if (!nativeShadow) {\n      StyleTransformer.dom(template.content, elementName);\n    }\n    // check if the styling has mixin definitions or uses\n    this._ensure();\n    let hasMixins = this._applyShim['detectMixin'](cssText);\n    let ast = parse(cssText);\n    // only run the applyshim transforms if there is a mixin involved\n    if (hasMixins && nativeCssVariables) {\n      this._applyShim['transformRules'](ast, elementName);\n    }\n    template._styleAst = ast;\n    template._cssBuild = cssBuild;\n\n    let ownPropertyNames = [];\n    if (!nativeCssVariables) {\n      ownPropertyNames = StyleProperties.decorateStyles(template._styleAst, info);\n    }\n    if (!ownPropertyNames.length || nativeCssVariables) {\n      let root = nativeShadow ? template.content : null;\n      let placeholder = placeholderMap[elementName];\n      let style = this._generateStaticStyle(info, template._styleAst, root, placeholder);\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n  _generateStaticStyle(info, rules, shadowroot, placeholder) {\n    let cssText = StyleTransformer.elementStyles(info, rules);\n    if (cssText.length) {\n      return StyleUtil.applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n  }\n  _prepareHost(host) {\n    let {is, extends: typeExtension} = StyleUtil.getIsExtends(host);\n    let placeholder = placeholderMap[is];\n    let template = templateMap[is];\n    let ast;\n    let ownStylePropertyNames;\n    let cssBuild;\n    if (template) {\n      ast = template._styleAst;\n      ownStylePropertyNames = template._ownPropertyNames;\n      cssBuild = template._cssBuild;\n    }\n    return StyleInfo.set(host,\n      new StyleInfo(\n        ast,\n        placeholder,\n        ownStylePropertyNames,\n        is,\n        typeExtension,\n        cssBuild\n      )\n    );\n  }\n  _ensureApplyShim() {\n    if (this._applyShim) {\n      return;\n    } else if (window.ShadyCSS.ApplyShim) {\n      this._applyShim = window.ShadyCSS.ApplyShim;\n      this._applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n    } else {\n      this._applyShim = {\n        /* eslint-disable no-unused-vars */\n        ['detectMixin'](str){return false},\n        ['transformRule'](ast){},\n        ['transformRules'](ast, name){},\n        /* eslint-enable no-unused-vars */\n      }\n    }\n  }\n  _ensureCustomStyleInterface() {\n    if (this._customStyleInterface) {\n      return;\n    } else if (window.ShadyCSS.CustomStyleInterface) {\n      this._customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */(window.ShadyCSS.CustomStyleInterface);\n      /** @type {function(!HTMLStyleElement)} */\n      this._customStyleInterface['transformCallback'] = (style) => {this.transformCustomStyleForDocument(style)};\n      this._customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this._customStyleInterface['enqueued'] || this._elementsHaveApplied) {\n            this.flushCustomStyles();\n          }\n        })\n      };\n    } else {\n      this._customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */({\n        ['findStyles']() {},\n        ['enqueued']: false,\n        ['getStyleForCustomStyle'](s) { return null } // eslint-disable-line no-unused-vars\n      })\n    }\n  }\n  _ensure() {\n    this._ensureApplyShim();\n    this._ensureCustomStyleInterface();\n  }\n  /**\n   * Flush and apply custom styles to document\n   */\n  flushCustomStyles() {\n    this._ensure();\n    this._customStyleInterface['findStyles']();\n    // early return if custom-styles don't need validation\n    if (!this._customStyleInterface['enqueued']) {\n      return;\n    }\n    let customStyles = this._customStyleInterface['customStyles'];\n    if (!nativeCssVariables) {\n      this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n      this._applyCustomStyles(customStyles);\n    } else {\n      this._revalidateCustomStyleApplyShim(customStyles);\n    }\n    this._customStyleInterface['enqueued'] = false;\n    // if custom elements have upgraded and there are no native css variables, we must recalculate the whole tree\n    if (this._elementsHaveApplied && !nativeCssVariables) {\n      this.styleDocument();\n    }\n  }\n  /**\n   * Apply styles for the given element\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} overrideProps\n   */\n  styleElement(host, overrideProps) {\n    let {is} = StyleUtil.getIsExtends(host);\n    let styleInfo = StyleInfo.get(host);\n    if (!styleInfo) {\n      styleInfo = this._prepareHost(host);\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (overrideProps) {\n      styleInfo.overrideStyleProperties =\n        styleInfo.overrideStyleProperties || {};\n      Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n    }\n    if (!nativeCssVariables) {\n     this._updateProperties(host, styleInfo);\n      if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n        this._applyStyleProperties(host, styleInfo);\n      }\n    } else {\n      if (styleInfo.overrideStyleProperties) {\n        updateNativeProperties(host, styleInfo.overrideStyleProperties);\n      }\n      let template = templateMap[is];\n      // bail early if there is no shadowroot for this element\n      if (!template && !this._isRootOwner(host)) {\n        return;\n      }\n      if (template && template._style && !ApplyShimUtils.templateIsValid(template)) {\n        // update template\n        if (!ApplyShimUtils.templateIsValidating(template)) {\n          this._ensure();\n          this._applyShim['transformRules'](template._styleAst, is);\n          template._style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          ApplyShimUtils.startValidatingTemplate(template);\n        }\n        // update instance if native shadowdom\n        if (nativeShadow) {\n          let root = host.shadowRoot;\n          if (root) {\n            let style = root.querySelector('style');\n            style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n        styleInfo.styleRules = template._styleAst;\n      }\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = node.getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = StyleUtil.getIsExtends(host).is;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!nativeShadow) {\n      StyleProperties.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties.hostAndRootPropertiesForScope(host, styleInfo.styleRules);\n    let propertyData = StyleProperties.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  /**\n   * Update styles of the whole document\n   *\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.styleSubtree(this._documentOwner, properties);\n  }\n  /**\n   * Update styles of a subtree\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} properties\n   */\n  styleSubtree(host, properties) {\n    if (host.shadowRoot || this._isRootOwner(host)) {\n      this.styleElement(host, properties);\n    }\n    // process the shadowdom children of `root`\n    let root = host.shadowRoot;\n    let shadowChildren = root && (root.children || root.childNodes);\n    if (shadowChildren) {\n      for (let i = 0; i < shadowChildren.length; i++) {\n        let c = /** @type {!HTMLElement} */(shadowChildren[i]);\n        this.styleSubtree(c);\n      }\n    }\n    // process the lightdom children of `root`\n    let children = host.children || host.childNodes;\n    if (children) {\n      for (let i = 0; i < children.length; i++) {\n        let c = /** @type {!HTMLElement} */(children[i]);\n        this.styleSubtree(c);\n      }\n    }\n  }\n  /* Custom Style operations */\n  _revalidateCustomStyleApplyShim(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        this._revalidateApplyShim(s);\n      }\n    }\n  }\n  _applyCustomStyles(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        StyleProperties.applyCustomStyle(s, this._documentOwnerStyleInfo.styleProperties);\n      }\n    }\n  }\n  transformCustomStyleForDocument(style) {\n    let ast = StyleUtil.rulesForStyle(style);\n    StyleUtil.forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer.documentRule(rule);\n      }\n      if (nativeCssVariables) {\n        this._ensure();\n        this._applyShim['transformRule'](rule);\n      }\n    });\n    if (nativeCssVariables) {\n      style.textContent = StyleUtil.toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules.rules.push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (nativeCssVariables) {\n      let ast = StyleUtil.rulesForStyle(style);\n      this._ensure();\n      this._applyShim['transformRules'](ast);\n      style.textContent = StyleUtil.toCssText(ast);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!nativeCssVariables) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value.trim();\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = element.getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer.SCOPE_NAME, scopeName);\n    }\n    if (!nativeCssVariables) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    StyleUtil.setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n}\n\n/* exports */\nScopingShim.prototype['flush'] = ScopingShim.prototype.flush;\nScopingShim.prototype['prepareTemplate'] = ScopingShim.prototype.prepareTemplate;\nScopingShim.prototype['styleElement'] = ScopingShim.prototype.styleElement;\nScopingShim.prototype['styleDocument'] = ScopingShim.prototype.styleDocument;\nScopingShim.prototype['styleSubtree'] = ScopingShim.prototype.styleSubtree;\nScopingShim.prototype['getComputedStyleValue'] = ScopingShim.prototype.getComputedStyleValue;\nScopingShim.prototype['setElementClass'] = ScopingShim.prototype.setElementClass;\nScopingShim.prototype['_styleInfoForNode'] = ScopingShim.prototype._styleInfoForNode;\nScopingShim.prototype['transformCustomStyleForDocument'] = ScopingShim.prototype.transformCustomStyleForDocument;\nScopingShim.prototype['getStyleAst'] = ScopingShim.prototype.getStyleAst;\nScopingShim.prototype['styleAstToString'] = ScopingShim.prototype.styleAstToString;\nScopingShim.prototype['flushCustomStyles'] = ScopingShim.prototype.flushCustomStyles;\nObject.defineProperties(ScopingShim.prototype, {\n  'nativeShadow': {\n    get() {\n      return nativeShadow;\n    }\n  },\n  'nativeCss': {\n    get() {\n      return nativeCssVariables;\n    }\n  }\n});","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nexport default class StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ScopingShim from '../src/scoping-shim'\nimport {nativeCssVariables, nativeShadow} from '../src/style-settings'\n\n/** @const {ScopingShim} */\nconst scopingShim = new ScopingShim();\n\nlet ApplyShim, CustomStyleInterface;\n\nif (window['ShadyCSS']) {\n  ApplyShim = window['ShadyCSS']['ApplyShim'];\n  CustomStyleInterface = window['ShadyCSS']['CustomStyleInterface'];\n}\n\nwindow.ShadyCSS = {\n  ScopingShim: scopingShim,\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplate(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplate(template, elementName, elementExtends)\n  },\n\n  /**\n   * @param {!HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleSubtree(element, properties);\n  },\n\n  /**\n   * @param {!HTMLElement} element\n   */\n  styleElement(element) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleElement(element);\n  },\n\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleDocument(properties);\n  },\n\n  /**\n   * @param {Element} element\n   * @param {string} property\n   * @return {string}\n   */\n  getComputedStyleValue(element, property) {\n    return scopingShim.getComputedStyleValue(element, property);\n  },\n\n  nativeCss: nativeCssVariables,\n\n  nativeShadow: nativeShadow\n};\n\nif (ApplyShim) {\n  window.ShadyCSS.ApplyShim = ApplyShim;\n}\n\nif (CustomStyleInterface) {\n  window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n}"]}